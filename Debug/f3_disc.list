
f3_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a904  0800a904  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800a904  0800a904  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a904  0800a904  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00001318  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001530  20001530  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157dc  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003966  00000000  00000000  00035a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f78  00000000  00000000  0003a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ebb  00000000  00000000  0003b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187ad  00000000  00000000  0005c303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4e8e  00000000  00000000  00074ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012993e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c4  00000000  00000000  00129990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a834 	.word	0x0800a834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800a834 	.word	0x0800a834

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	73fb      	strb	r3, [r7, #15]

  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800027e:	f000 fc45 	bl	8000b0c <COMPASSACCELERO_IO_Init>

  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000282:	88fb      	ldrh	r3, [r7, #6]
 8000284:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	461a      	mov	r2, r3
 800028a:	2120      	movs	r1, #32
 800028c:	2032      	movs	r0, #50	; 0x32
 800028e:	f000 fcb5 	bl	8000bfc <COMPASSACCELERO_IO_Write>

  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000292:	2300      	movs	r3, #0
 8000294:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	461a      	mov	r2, r3
 800029a:	2123      	movs	r1, #35	; 0x23
 800029c:	2032      	movs	r0, #50	; 0x32
 800029e:	f000 fcad 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID
  */
uint8_t LSM303DLHC_AccReadID(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]

  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80002c2:	f000 fc23 	bl	8000b0c <COMPASSACCELERO_IO_Init>

  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80002c6:	210f      	movs	r1, #15
 80002c8:	2032      	movs	r0, #50	; 0x32
 80002ca:	f000 fcaa 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]

  return ctrl;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80002e2:	2124      	movs	r1, #36	; 0x24
 80002e4:	2032      	movs	r0, #50	; 0x32
 80002e6:	f000 fc9c 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]

  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002f4:	71fb      	strb	r3, [r7, #7]

  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	461a      	mov	r2, r3
 80002fa:	2124      	movs	r1, #36	; 0x24
 80002fc:	2032      	movs	r0, #50	; 0x32
 80002fe:	f000 fc7d 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b084      	sub	sp, #16
 800030e:	af00      	add	r7, sp, #0
 8000310:	4603      	mov	r3, r0
 8000312:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000314:	2121      	movs	r1, #33	; 0x21
 8000316:	2032      	movs	r0, #50	; 0x32
 8000318:	f000 fc83 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 800031c:	4603      	mov	r3, r0
 800031e:	73fb      	strb	r3, [r7, #15]

  tmpreg &= 0x0C;
 8000320:	7bfb      	ldrb	r3, [r7, #15]
 8000322:	f003 030c 	and.w	r3, r3, #12
 8000326:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000328:	7bfa      	ldrb	r2, [r7, #15]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	4313      	orrs	r3, r2
 800032e:	73fb      	strb	r3, [r7, #15]

  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	461a      	mov	r2, r3
 8000334:	2121      	movs	r1, #33	; 0x21
 8000336:	2032      	movs	r0, #50	; 0x32
 8000338:	f000 fc60 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800034e:	2121      	movs	r1, #33	; 0x21
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f000 fc66 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 8000356:	4603      	mov	r3, r0
 8000358:	73fb      	strb	r3, [r7, #15]

  tmpreg &= 0xF7;
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	f023 0308 	bic.w	r3, r3, #8
 8000360:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000362:	7bfa      	ldrb	r2, [r7, #15]
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	4313      	orrs	r3, r2
 8000368:	73fb      	strb	r3, [r7, #15]

  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	461a      	mov	r2, r3
 800036e:	2121      	movs	r1, #33	; 0x21
 8000370:	2032      	movs	r0, #50	; 0x32
 8000372:	f000 fc43 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b088      	sub	sp, #32
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000386:	2300      	movs	r3, #0
 8000388:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800038e:	2301      	movs	r3, #1
 8000390:	77bb      	strb	r3, [r7, #30]

  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000392:	2123      	movs	r1, #35	; 0x23
 8000394:	2032      	movs	r0, #50	; 0x32
 8000396:	f000 fc44 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 800039a:	4603      	mov	r3, r0
 800039c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800039e:	2124      	movs	r1, #36	; 0x24
 80003a0:	2032      	movs	r0, #50	; 0x32
 80003a2:	f000 fc3e 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003a6:	4603      	mov	r3, r0
 80003a8:	757b      	strb	r3, [r7, #21]

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A);
 80003aa:	2128      	movs	r1, #40	; 0x28
 80003ac:	2032      	movs	r0, #50	; 0x32
 80003ae:	f000 fc38 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003b2:	4603      	mov	r3, r0
 80003b4:	b25b      	sxtb	r3, r3
 80003b6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80003b8:	2129      	movs	r1, #41	; 0x29
 80003ba:	2032      	movs	r0, #50	; 0x32
 80003bc:	f000 fc31 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003c0:	4603      	mov	r3, r0
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80003c6:	212a      	movs	r1, #42	; 0x2a
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fc2a 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003ce:	4603      	mov	r3, r0
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80003d4:	212b      	movs	r1, #43	; 0x2b
 80003d6:	2032      	movs	r0, #50	; 0x32
 80003d8:	f000 fc23 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003dc:	4603      	mov	r3, r0
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80003e2:	212c      	movs	r1, #44	; 0x2c
 80003e4:	2032      	movs	r0, #50	; 0x32
 80003e6:	f000 fc1c 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003ea:	4603      	mov	r3, r0
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80003f0:	212d      	movs	r1, #45	; 0x2d
 80003f2:	2032      	movs	r0, #50	; 0x32
 80003f4:	f000 fc15 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	747b      	strb	r3, [r7, #17]

  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB))
 80003fe:	7d3b      	ldrb	r3, [r7, #20]
 8000400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000404:	2b00      	cmp	r3, #0
 8000406:	d123      	bne.n	8000450 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000408:	2300      	movs	r3, #0
 800040a:	77fb      	strb	r3, [r7, #31]
 800040c:	e01c      	b.n	8000448 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800040e:	7ffb      	ldrb	r3, [r7, #31]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	3301      	adds	r3, #1
 8000414:	3320      	adds	r3, #32
 8000416:	443b      	add	r3, r7
 8000418:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800041c:	b29b      	uxth	r3, r3
 800041e:	021b      	lsls	r3, r3, #8
 8000420:	b29a      	uxth	r2, r3
 8000422:	7ffb      	ldrb	r3, [r7, #31]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	3320      	adds	r3, #32
 8000428:	443b      	add	r3, r7
 800042a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800042e:	b29b      	uxth	r3, r3
 8000430:	4413      	add	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	7ffb      	ldrb	r3, [r7, #31]
 8000436:	b212      	sxth	r2, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	3320      	adds	r3, #32
 800043c:	443b      	add	r3, r7
 800043e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000442:	7ffb      	ldrb	r3, [r7, #31]
 8000444:	3301      	adds	r3, #1
 8000446:	77fb      	strb	r3, [r7, #31]
 8000448:	7ffb      	ldrb	r3, [r7, #31]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d9df      	bls.n	800040e <LSM303DLHC_AccReadXYZ+0x90>
 800044e:	e022      	b.n	8000496 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000450:	2300      	movs	r3, #0
 8000452:	77fb      	strb	r3, [r7, #31]
 8000454:	e01c      	b.n	8000490 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000456:	7ffb      	ldrb	r3, [r7, #31]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	3320      	adds	r3, #32
 800045c:	443b      	add	r3, r7
 800045e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000462:	b29b      	uxth	r3, r3
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	b29a      	uxth	r2, r3
 8000468:	7ffb      	ldrb	r3, [r7, #31]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	3301      	adds	r3, #1
 800046e:	3320      	adds	r3, #32
 8000470:	443b      	add	r3, r7
 8000472:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000476:	b29b      	uxth	r3, r3
 8000478:	4413      	add	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	7ffb      	ldrb	r3, [r7, #31]
 800047e:	b212      	sxth	r2, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	3320      	adds	r3, #32
 8000484:	443b      	add	r3, r7
 8000486:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800048a:	7ffb      	ldrb	r3, [r7, #31]
 800048c:	3301      	adds	r3, #1
 800048e:	77fb      	strb	r3, [r7, #31]
 8000490:	7ffb      	ldrb	r3, [r7, #31]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d9df      	bls.n	8000456 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }

  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000496:	7d3b      	ldrb	r3, [r7, #20]
 8000498:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800049c:	2b30      	cmp	r3, #48	; 0x30
 800049e:	d013      	beq.n	80004c8 <LSM303DLHC_AccReadXYZ+0x14a>
 80004a0:	2b30      	cmp	r3, #48	; 0x30
 80004a2:	dc14      	bgt.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
 80004a4:	2b20      	cmp	r3, #32
 80004a6:	d00c      	beq.n	80004c2 <LSM303DLHC_AccReadXYZ+0x144>
 80004a8:	2b20      	cmp	r3, #32
 80004aa:	dc10      	bgt.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d002      	beq.n	80004b6 <LSM303DLHC_AccReadXYZ+0x138>
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d003      	beq.n	80004bc <LSM303DLHC_AccReadXYZ+0x13e>
 80004b4:	e00b      	b.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80004b6:	2301      	movs	r3, #1
 80004b8:	77bb      	strb	r3, [r7, #30]
    break;
 80004ba:	e008      	b.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80004bc:	2302      	movs	r3, #2
 80004be:	77bb      	strb	r3, [r7, #30]
    break;
 80004c0:	e005      	b.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80004c2:	2304      	movs	r3, #4
 80004c4:	77bb      	strb	r3, [r7, #30]
    break;
 80004c6:	e002      	b.n	80004ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80004c8:	230c      	movs	r3, #12
 80004ca:	77bb      	strb	r3, [r7, #30]
    break;
 80004cc:	bf00      	nop
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	77fb      	strb	r3, [r7, #31]
 80004d2:	e014      	b.n	80004fe <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80004d4:	7ffb      	ldrb	r3, [r7, #31]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	3320      	adds	r3, #32
 80004da:	443b      	add	r3, r7
 80004dc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	7fbb      	ldrb	r3, [r7, #30]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	fb12 f303 	smulbb	r3, r2, r3
 80004ea:	b299      	uxth	r1, r3
 80004ec:	7ffb      	ldrb	r3, [r7, #31]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	b20a      	sxth	r2, r1
 80004f6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80004f8:	7ffb      	ldrb	r3, [r7, #31]
 80004fa:	3301      	adds	r3, #1
 80004fc:	77fb      	strb	r3, [r7, #31]
 80004fe:	7ffb      	ldrb	r3, [r7, #31]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d9e7      	bls.n	80004d4 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800051c:	2121      	movs	r1, #33	; 0x21
 800051e:	2032      	movs	r0, #50	; 0x32
 8000520:	f000 fb7f 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 8000524:	4603      	mov	r3, r0
 8000526:	73fb      	strb	r3, [r7, #15]

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f023 0304 	bic.w	r3, r3, #4
 800052e:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterClickState;
 8000530:	7bfa      	ldrb	r2, [r7, #15]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4313      	orrs	r3, r2
 8000536:	73fb      	strb	r3, [r7, #15]

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	461a      	mov	r2, r3
 800053c:	2121      	movs	r1, #33	; 0x21
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fb5c 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]

  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800055a:	2122      	movs	r1, #34	; 0x22
 800055c:	2032      	movs	r0, #50	; 0x32
 800055e:	f000 fb60 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 8000562:	4603      	mov	r3, r0
 8000564:	73fb      	strb	r3, [r7, #15]

  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4313      	orrs	r3, r2
 800056c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	461a      	mov	r2, r3
 8000572:	2122      	movs	r1, #34	; 0x22
 8000574:	2032      	movs	r0, #50	; 0x32
 8000576:	f000 fb41 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]

  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000590:	2138      	movs	r1, #56	; 0x38
 8000592:	2032      	movs	r0, #50	; 0x32
 8000594:	f000 fb45 	bl	8000c22 <COMPASSACCELERO_IO_Read>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	461a      	mov	r2, r3
 80005a8:	2138      	movs	r1, #56	; 0x38
 80005aa:	2032      	movs	r0, #50	; 0x32
 80005ac:	f000 fb26 	bl	8000bfc <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80005b0:	230a      	movs	r3, #10
 80005b2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	461a      	mov	r2, r3
 80005b8:	213a      	movs	r1, #58	; 0x3a
 80005ba:	2032      	movs	r0, #50	; 0x32
 80005bc:	f000 fb1e 	bl	8000bfc <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
 80005c0:	2305      	movs	r3, #5
 80005c2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	461a      	mov	r2, r3
 80005c8:	213b      	movs	r1, #59	; 0x3b
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f000 fb16 	bl	8000bfc <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	461a      	mov	r2, r3
 80005d4:	213c      	movs	r1, #60	; 0x3c
 80005d6:	2032      	movs	r0, #50	; 0x32
 80005d8:	f000 fb10 	bl	8000bfc <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	461a      	mov	r2, r3
 80005e4:	213d      	movs	r1, #61	; 0x3d
 80005e6:	2032      	movs	r0, #50	; 0x32
 80005e8:	f000 fb08 	bl	8000bfc <COMPASSACCELERO_IO_Write>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80005f8:	f000 fad2 	bl	8000ba0 <COMPASSACCELERO_IO_ITConfig>

  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80005fc:	2080      	movs	r0, #128	; 0x80
 80005fe:	f7ff ffa5 	bl	800054c <LSM303DLHC_AccIT1Enable>

  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000602:	2004      	movs	r0, #4
 8000604:	f7ff ff83 	bl	800050e <LSM303DLHC_AccFilterClickCmd>

  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000608:	2010      	movs	r0, #16
 800060a:	f7ff ffba 	bl	8000582 <LSM303DLHC_AccClickITEnable>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fd05 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f80f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8ed 	bl	80007fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000622:	f000 f86d 	bl	8000700 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000626:	f000 f8ab 	bl	8000780 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800062a:	f008 ff99 	bl	8009560 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ACCELERO_MEMS_Test();
 800062e:	f000 f968 	bl	8000902 <ACCELERO_MEMS_Test>
	  HAL_Delay(50);
 8000632:	2032      	movs	r0, #50	; 0x32
 8000634:	f000 fd5c 	bl	80010f0 <HAL_Delay>
	  ACCELERO_MEMS_Test();
 8000638:	e7f9      	b.n	800062e <main+0x1c>
	...

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09e      	sub	sp, #120	; 0x78
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000646:	2228      	movs	r2, #40	; 0x28
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fc7c 	bl	8009f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	223c      	movs	r2, #60	; 0x3c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f009 fc6e 	bl	8009f48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800066c:	2303      	movs	r3, #3
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800068c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000690:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fbf0 	bl	8003e7c <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006a2:	f000 f929 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fc18 	bl	8004ef8 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ce:	f000 f913 	bl	80008f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <SystemClock_Config+0xc0>)
 80006d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fdee 	bl	80052c4 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ee:	f000 f903 	bl	80008f8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3778      	adds	r7, #120	; 0x78
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	00020020 	.word	0x00020020

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C1_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C1_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C1_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_I2C1_Init+0x74>)
 800073c:	f001 f87c 	bl	8001838 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f8d7 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C1_Init+0x74>)
 800074e:	f001 fe25 	bl	800239c <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f8ce 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2C1_Init+0x74>)
 8000760:	f001 fe67 	bl	8002432 <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f8c5 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000234 	.word	0x20000234
 8000778:	40005400 	.word	0x40005400
 800077c:	2000090e 	.word	0x2000090e

08000780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_SPI1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_SPI1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_SPI1_Init+0x74>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_SPI1_Init+0x74>)
 800079a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800079e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007da:	2208      	movs	r2, #8
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_SPI1_Init+0x74>)
 80007e0:	f004 ff20 	bl	8005624 <HAL_SPI_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f885 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000288 	.word	0x20000288
 80007f8:	40013000 	.word	0x40013000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_GPIO_Init+0xf4>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084c:	6153      	str	r3, [r2, #20]
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_GPIO_Init+0xf4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xf4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800088a:	2200      	movs	r2, #0
 800088c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000890:	4818      	ldr	r0, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000892:	f000 ffb9 	bl	8001808 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000896:	2337      	movs	r3, #55	; 0x37
 8000898:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_GPIO_Init+0xf8>)
 80008ac:	f000 fd56 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008b0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80008b4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480a      	ldr	r0, [pc, #40]	; (80008f4 <MX_GPIO_Init+0xf8>)
 80008ca:	f000 fd47 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fd3a 	bl	800135c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48001000 	.word	0x48001000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>

08000902 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8000906:	f000 f99f 	bl	8000c48 <BSP_ACCELERO_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler();
 8000910:	f7ff fff2 	bl	80008f8 <Error_Handler>
  }

  ACCELERO_ReadAcc();
 8000914:	f000 f802 	bl	800091c <ACCELERO_ReadAcc>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af02      	add	r7, sp, #8
  int16_t buffer[3] = {0};
 8000922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval, zval = 0x00;
 800092c:	2300      	movs	r3, #0
 800092e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  char output[60] = "";
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2238      	movs	r2, #56	; 0x38
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f009 fb03 	bl	8009f48 <memset>
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8000942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f9e6 	bl	8000d18 <BSP_ACCELERO_GetXYZ>
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 800094c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800094e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  yval = buffer[1];
 8000952:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000954:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  zval = buffer[2];
 8000958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800095c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  sprintf(output, "%d %d %d \r\n", xval, yval, zval);
 8000960:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000964:	f9b7 1042 	ldrsh.w	r1, [r7, #66]	; 0x42
 8000968:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800096c:	4638      	mov	r0, r7
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	460b      	mov	r3, r1
 8000972:	4906      	ldr	r1, [pc, #24]	; (800098c <ACCELERO_ReadAcc+0x70>)
 8000974:	f009 faf0 	bl	8009f58 <siprintf>
  CDC_Transmit_FS(output,60);
 8000978:	463b      	mov	r3, r7
 800097a:	213c      	movs	r1, #60	; 0x3c
 800097c:	4618      	mov	r0, r3
 800097e:	f008 fead 	bl	80096dc <CDC_Transmit_FS>
}
 8000982:	bf00      	nop
 8000984:	3748      	adds	r7, #72	; 0x48
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800a84c 	.word	0x0800a84c

08000990 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <I2Cx_MspInit+0x60>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <I2Cx_MspInit+0x60>)
 800099e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <I2Cx_MspInit+0x60>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80009b0:	23c0      	movs	r3, #192	; 0xc0
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80009c0:	2304      	movs	r3, #4
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <I2Cx_MspInit+0x64>)
 80009cc:	f000 fcc6 	bl	800135c <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <I2Cx_MspInit+0x60>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <I2Cx_MspInit+0x60>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <I2Cx_MspInit+0x60>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <I2Cx_Init+0x4c>)
 80009fe:	f001 fa07 	bl	8001e10 <HAL_I2C_GetState>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11a      	bne.n	8000a3e <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <I2Cx_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a10:	2232      	movs	r2, #50	; 0x32
 8000a12:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a34:	f7ff ffac 	bl	8000990 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <I2Cx_Init+0x4c>)
 8000a3a:	f000 fefd 	bl	8001838 <HAL_I2C_Init>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002ec 	.word	0x200002ec
 8000a48:	40005400 	.word	0x40005400

08000a4c <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	460b      	mov	r3, r1
 8000a58:	717b      	strb	r3, [r7, #5]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a62:	797b      	ldrb	r3, [r7, #5]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <I2Cx_WriteData+0x48>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	88f9      	ldrh	r1, [r7, #6]
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <I2Cx_WriteData+0x4c>)
 8000a7a:	f000 ff9b 	bl	80019b4 <HAL_I2C_Mem_Write>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a88:	f000 f834 	bl	8000af4 <I2Cx_Error>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000034 	.word	0x20000034
 8000a98:	200002ec 	.word	0x200002ec

08000a9c <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af04      	add	r7, sp, #16
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000ab4:	797b      	ldrb	r3, [r7, #5]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <I2Cx_ReadData+0x50>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	88f9      	ldrh	r1, [r7, #6]
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	f107 030e 	add.w	r3, r7, #14
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <I2Cx_ReadData+0x54>)
 8000ace:	f001 f885 	bl	8001bdc <HAL_I2C_Mem_Read>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000adc:	f000 f80a 	bl	8000af4 <I2Cx_Error>

  }
  return value;
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000034 	.word	0x20000034
 8000af0:	200002ec 	.word	0x200002ec

08000af4 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <I2Cx_Error+0x14>)
 8000afa:	f000 ff2c 	bl	8001956 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000afe:	f7ff ff7b 	bl	80009f8 <I2Cx_Init>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200002ec 	.word	0x200002ec

08000b0c <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]

  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <COMPASSACCELERO_IO_Init+0x8c>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8000b42:	2304      	movs	r3, #4
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <COMPASSACCELERO_IO_Init+0x90>)
 8000b5a:	f000 fbff 	bl	800135c <HAL_GPIO_Init>

  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	2008      	movs	r0, #8
 8000b64:	f000 fbc3 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f000 fbdc 	bl	8001326 <HAL_NVIC_EnableIRQ>

  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8000b6e:	2330      	movs	r3, #48	; 0x30
 8000b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <COMPASSACCELERO_IO_Init+0x90>)
 8000b86:	f000 fbe9 	bl	800135c <HAL_GPIO_Init>

  I2Cx_Init();
 8000b8a:	f7ff ff35 	bl	80009f8 <I2Cx_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48001000 	.word	0x48001000

08000ba0 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8000bbe:	2330      	movs	r3, #48	; 0x30
 8000bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8000bd6:	f000 fbc1 	bl	800135c <HAL_GPIO_Init>

  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	200a      	movs	r0, #10
 8000be0:	f000 fb85 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fb9e 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48001000 	.word	0x48001000

08000bfc <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	460b      	mov	r3, r1
 8000c08:	717b      	strb	r3, [r7, #5]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8000c0e:	793a      	ldrb	r2, [r7, #4]
 8000c10:	7979      	ldrb	r1, [r7, #5]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff19 	bl	8000a4c <I2Cx_WriteData>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000c32:	797a      	ldrb	r2, [r7, #5]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff2f 	bl	8000a9c <I2Cx_ReadData>
 8000c3e:	4603      	mov	r3, r0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <BSP_ACCELERO_Init>:
/* Exported functions ---------------------------------------------------------*/
/** @addtogroup STM32F3_DISCOVERY_ACCELEROMETER_Exported_Functions
  * @{
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8000c52:	2300      	movs	r3, #0
 8000c54:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <BSP_ACCELERO_Init+0xc8>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b33      	cmp	r3, #51	; 0x33
 8000c60:	d14f      	bne.n	8000d02 <BSP_ACCELERO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <BSP_ACCELERO_Init+0xcc>)
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <BSP_ACCELERO_Init+0xc8>)
 8000c66:	601a      	str	r2, [r3, #0]

  /* MEMS configuration ------------------------------------------------------*/
   /* Fill the accelerometer structure */
    LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	733b      	strb	r3, [r7, #12]
    LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8000c6c:	2340      	movs	r3, #64	; 0x40
 8000c6e:	737b      	strb	r3, [r7, #13]
    LSM303DLHC_InitStructure.Axes_Enable= LSM303DLHC_AXES_ENABLE;
 8000c70:	2307      	movs	r3, #7
 8000c72:	73bb      	strb	r3, [r7, #14]
    LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 8000c74:	2300      	movs	r3, #0
 8000c76:	74bb      	strb	r3, [r7, #18]
    LSM303DLHC_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	743b      	strb	r3, [r7, #16]
    LSM303DLHC_InitStructure.Endianness=LSM303DLHC_BLE_LSB;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	747b      	strb	r3, [r7, #17]
    LSM303DLHC_InitStructure.High_Resolution=LSM303DLHC_HR_ENABLE;
 8000c80:	2308      	movs	r3, #8
 8000c82:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8000c84:	7b3a      	ldrb	r2, [r7, #12]
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b2da      	uxtb	r2, r3
                       LSM303DLHC_InitStructure.Axes_Enable);
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8abb      	ldrh	r3, [r7, #20]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8000c9a:	7c3a      	ldrb	r2, [r7, #16]
 8000c9c:	7c7b      	ldrb	r3, [r7, #17]
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	7cbb      	ldrb	r3, [r7, #18]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	82bb      	strh	r3, [r7, #20]

  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <BSP_ACCELERO_Init+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	8aba      	ldrh	r2, [r7, #20]
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4798      	blx	r3

  /* Fill the accelerometer LPF structure */
    LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	713b      	strb	r3, [r7, #4]
    LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	717b      	strb	r3, [r7, #5]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	71bb      	strb	r3, [r7, #6]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8000cd8:	793a      	ldrb	r2, [r7, #4]
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
 8000cda:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	82bb      	strh	r3, [r7, #20]

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <BSP_ACCELERO_Init+0xcc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	8aba      	ldrh	r2, [r7, #20]
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3

    ret = ACCELERO_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
 8000d00:	e001      	b.n	8000d06 <BSP_ACCELERO_Init+0xbe>
  }
  else
  {
    ret = ACCELERO_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000340 	.word	0x20000340

08000d18 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointeur on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <BSP_ACCELERO_GetXYZ+0x24>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <BSP_ACCELERO_GetXYZ+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
  }
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000340 	.word	0x20000340

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x44>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x44>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x44>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 faae 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_I2C_MspInit+0x7c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d127      	bne.n	8000dfa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000dc2:	23c0      	movs	r3, #192	; 0xc0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_I2C_MspInit+0x84>)
 8000dde:	f000 fabd 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40005400 	.word	0x40005400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400

08000e10 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_I2C_MspDeInit+0x38>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10d      	bne.n	8000e3e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_I2C_MspDeInit+0x3c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <HAL_I2C_MspDeInit+0x3c>)
 8000e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e2c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <HAL_I2C_MspDeInit+0x40>)
 8000e32:	f000 fc0d 	bl	8001650 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_I2C_MspDeInit+0x40>)
 8000e3a:	f000 fc09 	bl	8001650 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000400 	.word	0x48000400

08000e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_SPI_MspInit+0x7c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d128      	bne.n	8000ec8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0x80>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000ea6:	23e0      	movs	r3, #224	; 0xe0
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 fa4a 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8c4 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000f32:	f001 fbc2 	bl	80026ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001014 	.word	0x20001014

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f008 ffc0 	bl	8009ef4 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000a000 	.word	0x2000a000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	20000344 	.word	0x20000344
 8000fa8:	20001530 	.word	0x20001530

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f008 ff7f 	bl	8009f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fb06 	bl	8000612 <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001008:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001014:	0800a90c 	.word	0x0800a90c
  ldr r2, =_sbss
 8001018:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800101c:	20001530 	.word	0x20001530

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f94f 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fe7e 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f967 	bl	8001342 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92f 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000038 	.word	0x20000038
 80010a8:	20000040 	.word	0x20000040
 80010ac:	2000003c 	.word	0x2000003c

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000040 	.word	0x20000040
 80010d4:	20000348 	.word	0x20000348

080010d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;  
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000348 	.word	0x20000348

080010f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000040 	.word	0x20000040

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e154      	b.n	8001616 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8146 	beq.w	8001610 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 0201 	and.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b03      	cmp	r3, #3
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0203 	and.w	r2, r3, #3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80a0 	beq.w	8001610 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e8:	4a53      	ldr	r2, [pc, #332]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001512:	d019      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x2e0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d013      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_GPIO_Init+0x2e4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d00d      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a47      	ldr	r2, [pc, #284]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x1e0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a46      	ldr	r2, [pc, #280]	; (8001648 <HAL_GPIO_Init+0x2ec>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d101      	bne.n	8001538 <HAL_GPIO_Init+0x1dc>
 8001534:	2304      	movs	r3, #4
 8001536:	e008      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001538:	2305      	movs	r3, #5
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2303      	movs	r3, #3
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155a:	4937      	ldr	r1, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800158c:	4a2f      	ldr	r2, [pc, #188]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f aea3 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	48001000 	.word	0x48001000
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800165e:	e0b8      	b.n	80017d2 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001660:	2201      	movs	r2, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80ab 	beq.w	80017cc <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_GPIO_DeInit+0x1a0>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169e:	d019      	beq.n	80016d4 <HAL_GPIO_DeInit+0x84>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a54      	ldr	r2, [pc, #336]	; (80017f4 <HAL_GPIO_DeInit+0x1a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_DeInit+0x80>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a53      	ldr	r2, [pc, #332]	; (80017f8 <HAL_GPIO_DeInit+0x1a8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_DeInit+0x7c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_GPIO_DeInit+0x1ac>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_DeInit+0x78>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_GPIO_DeInit+0x1b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_DeInit+0x74>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e008      	b.n	80016d6 <HAL_GPIO_DeInit+0x86>
 80016c4:	2305      	movs	r3, #5
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_DeInit+0x86>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_DeInit+0x86>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_DeInit+0x86>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_DeInit+0x86>
 80016d4:	2300      	movs	r3, #0
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d132      	bne.n	800174c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4945      	ldr	r1, [pc, #276]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4941      	ldr	r1, [pc, #260]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 80016fe:	4013      	ands	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	493e      	ldr	r1, [pc, #248]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 800170c:	4013      	ands	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	493a      	ldr	r1, [pc, #232]	; (8001804 <HAL_GPIO_DeInit+0x1b4>)
 800171a:	4013      	ands	r3, r2
 800171c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800172e:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_GPIO_DeInit+0x1a0>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	482c      	ldr	r0, [pc, #176]	; (80017f0 <HAL_GPIO_DeInit+0x1a0>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	400a      	ands	r2, r1
 8001746:	3302      	adds	r3, #2
 8001748:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2103      	movs	r1, #3
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	08d2      	lsrs	r2, r2, #3
 8001782:	4019      	ands	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2103      	movs	r1, #3
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	2101      	movs	r1, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2103      	movs	r1, #3
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
    }

    position++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f af40 	bne.w	8001660 <HAL_GPIO_DeInit+0x10>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40010000 	.word	0x40010000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000c00 	.word	0x48000c00
 8001800:	48001000 	.word	0x48001000
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e081      	b.n	800194e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fa92 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d104      	bne.n	80018d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69d9      	ldr	r1, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fa45 	bl	8000e10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	f040 80f9 	bne.w	8001bce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_I2C_Mem_Write+0x34>
 80019e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0ed      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Mem_Write+0x4e>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e0e6      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0a:	f7ff fb65 	bl	80010d8 <HAL_GetTick>
 8001a0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2319      	movs	r3, #25
 8001a16:	2201      	movs	r2, #1
 8001a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fad1 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d1      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2221      	movs	r2, #33	; 0x21
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a54:	88f8      	ldrh	r0, [r7, #6]
 8001a56:	893a      	ldrh	r2, [r7, #8]
 8001a58:	8979      	ldrh	r1, [r7, #10]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4603      	mov	r3, r0
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f9e1 	bl	8001e2c <I2C_RequestMemoryWrite>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0a9      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d90e      	bls.n	8001aa4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	22ff      	movs	r2, #255	; 0xff
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	8979      	ldrh	r1, [r7, #10]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fc4b 	bl	8002338 <I2C_TransferConfig>
 8001aa2:	e00f      	b.n	8001ac4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fc3a 	bl	8002338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 faca 	bl	8002062 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e07b      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d034      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x1c8>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d130      	bne.n	8001b7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fa4d 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04d      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2bff      	cmp	r3, #255	; 0xff
 8001b3c:	d90e      	bls.n	8001b5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	22ff      	movs	r2, #255	; 0xff
 8001b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	8979      	ldrh	r1, [r7, #10]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fbef 	bl	8002338 <I2C_TransferConfig>
 8001b5a:	e00f      	b.n	8001b7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fbde 	bl	8002338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d19e      	bne.n	8001ac4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fab0 	bl	80020f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01a      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_I2C_Mem_Write+0x224>)
 8001bae:	400b      	ands	r3, r1
 8001bb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	fe00e800 	.word	0xfe00e800

08001bdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	817b      	strh	r3, [r7, #10]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	813b      	strh	r3, [r7, #8]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	f040 80fd 	bne.w	8001dfe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_I2C_Mem_Read+0x34>
 8001c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0f1      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Mem_Read+0x4e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0ea      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c32:	f7ff fa51 	bl	80010d8 <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f9bd 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d5      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2222      	movs	r2, #34	; 0x22
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c7c:	88f8      	ldrh	r0, [r7, #6]
 8001c7e:	893a      	ldrh	r2, [r7, #8]
 8001c80:	8979      	ldrh	r1, [r7, #10]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f921 	bl	8001ed4 <I2C_RequestMemoryRead>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ad      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d90e      	bls.n	8001ccc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	22ff      	movs	r2, #255	; 0xff
 8001cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	8979      	ldrh	r1, [r7, #10]
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_I2C_Mem_Read+0x22c>)
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fb37 	bl	8002338 <I2C_TransferConfig>
 8001cca:	e00f      	b.n	8001cec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	8979      	ldrh	r1, [r7, #10]
 8001cde:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_I2C_Mem_Read+0x22c>)
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fb26 	bl	8002338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f964 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07c      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d034      	beq.n	8001dac <HAL_I2C_Mem_Read+0x1d0>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d130      	bne.n	8001dac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2200      	movs	r2, #0
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f935 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e04d      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d90e      	bls.n	8001d8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fad7 	bl	8002338 <I2C_TransferConfig>
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fac6 	bl	8002338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d19a      	bne.n	8001cec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f998 	bl	80020f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01a      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_I2C_Mem_Read+0x230>)
 8001dde:	400b      	ands	r3, r1
 8001de0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	80002400 	.word	0x80002400
 8001e0c:	fe00e800 	.word	0xfe00e800

08001e10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1e:	b2db      	uxtb	r3, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	8979      	ldrh	r1, [r7, #10]
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <I2C_RequestMemoryWrite+0xa4>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fa6f 	bl	8002338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	69b9      	ldr	r1, [r7, #24]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8ff 	bl	8002062 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e02c      	b.n	8001ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e74:	893b      	ldrh	r3, [r7, #8]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e7e:	e015      	b.n	8001eac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e80:	893b      	ldrh	r3, [r7, #8]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f8e5 	bl	8002062 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e012      	b.n	8001ec8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea2:	893b      	ldrh	r3, [r7, #8]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f884 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	80002000 	.word	0x80002000

08001ed4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	817b      	strh	r3, [r7, #10]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	813b      	strh	r3, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	8979      	ldrh	r1, [r7, #10]
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <I2C_RequestMemoryRead+0xa4>)
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fa1c 	bl	8002338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f8ac 	bl	8002062 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e02c      	b.n	8001f6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1a:	893b      	ldrh	r3, [r7, #8]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
 8001f24:	e015      	b.n	8001f52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f26:	893b      	ldrh	r3, [r7, #8]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f892 	bl	8002062 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e012      	b.n	8001f6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f48:	893b      	ldrh	r3, [r7, #8]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f831 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	80002000 	.word	0x80002000

08001f7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d103      	bne.n	8001f9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d007      	beq.n	8001fb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	619a      	str	r2, [r3, #24]
  }
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	e031      	b.n	800203a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d02d      	beq.n	800203a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff f87b 	bl	80010d8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d122      	bne.n	800203a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	429a      	cmp	r2, r3
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	429a      	cmp	r2, r3
 8002010:	d113      	bne.n	800203a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4013      	ands	r3, r2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	429a      	cmp	r2, r3
 8002056:	d0be      	beq.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800206e:	e033      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f87f 	bl	8002178 <I2C_IsErrorOccurred>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e031      	b.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d025      	beq.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208c:	f7ff f824 	bl	80010d8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d302      	bcc.n	80020a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11a      	bne.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d013      	beq.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d1c4      	bne.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020fc:	e02f      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f838 	bl	8002178 <I2C_IsErrorOccurred>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e02d      	b.n	800216e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7fe ffe1 	bl	80010d8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11a      	bne.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d013      	beq.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b20      	cmp	r3, #32
 800216a:	d1c8      	bne.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d068      	beq.n	8002276 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2210      	movs	r2, #16
 80021aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021ac:	e049      	b.n	8002242 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d045      	beq.n	8002242 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7fe ff8f 	bl	80010d8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_IsErrorOccurred+0x54>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13a      	bne.n	8002242 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ee:	d121      	bne.n	8002234 <I2C_IsErrorOccurred+0xbc>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021f6:	d01d      	beq.n	8002234 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d01a      	beq.n	8002234 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800220e:	f7fe ff63 	bl	80010d8 <HAL_GetTick>
 8002212:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002214:	e00e      	b.n	8002234 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002216:	f7fe ff5f 	bl	80010d8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b19      	cmp	r3, #25
 8002222:	d907      	bls.n	8002234 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002232:	e006      	b.n	8002242 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b20      	cmp	r3, #32
 8002240:	d1e9      	bne.n	8002216 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b20      	cmp	r3, #32
 800224e:	d003      	beq.n	8002258 <I2C_IsErrorOccurred+0xe0>
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0aa      	beq.n	80021ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2220      	movs	r2, #32
 8002266:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002298:	61da      	str	r2, [r3, #28]


    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01c      	beq.n	8002326 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fe45 	bl	8001f7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <I2C_IsErrorOccurred+0x1bc>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800232a:	4618      	mov	r0, r3
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	fe00e800 	.word	0xfe00e800

08002338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	4613      	mov	r3, r2
 8002348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002350:	7a7b      	ldrb	r3, [r7, #9]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	4313      	orrs	r3, r2
 8002362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <I2C_TransferConfig+0x60>)
 8002378:	430b      	orrs	r3, r1
 800237a:	43db      	mvns	r3, r3
 800237c:	ea02 0103 	and.w	r1, r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	03ff63ff 	.word	0x03ff63ff

0800239c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d138      	bne.n	8002424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023bc:	2302      	movs	r3, #2
 80023be:	e032      	b.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	d139      	bne.n	80024bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002452:	2302      	movs	r3, #2
 8002454:	e033      	b.n	80024be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2224      	movs	r2, #36	; 0x24
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024cc:	b08b      	sub	sp, #44	; 0x2c
 80024ce:	af06      	add	r7, sp, #24
 80024d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0c4      	b.n	8002666 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f007 fa29 	bl	8009948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2203      	movs	r2, #3
 80024fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 f950 	bl	80057a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e040      	b.n	8002590 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	3301      	adds	r3, #1
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3303      	adds	r3, #3
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3338      	adds	r3, #56	; 0x38
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	333c      	adds	r3, #60	; 0x3c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	3340      	adds	r3, #64	; 0x40
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3b9      	bcc.n	800250e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	3301      	adds	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3b5      	bcc.n	80025a0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	687e      	ldr	r6, [r7, #4]
 800263c:	466d      	mov	r5, sp
 800263e:	f106 0410 	add.w	r4, r6, #16
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	1d33      	adds	r3, r6, #4
 800264c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264e:	6838      	ldr	r0, [r7, #0]
 8002650:	f003 f8c5 	bl	80057de <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_PCD_Start+0x16>
 8002680:	2302      	movs	r3, #2
 8002682:	e016      	b.n	80026b2 <HAL_PCD_Start+0x44>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 f872 	bl	800577a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002696:	2101      	movs	r1, #1
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f007 fbf3 	bl	8009e84 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f005 fb31 	bl	8007d0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f005 fb2a 	bl	8007d20 <USB_ReadInterrupts>
 80026cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fab2 	bl	8002c42 <PCD_EP_ISR_Handler>

    return;
 80026de:	e0bd      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d013      	beq.n	8002712 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	b292      	uxth	r2, r2
 80026fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f007 f9c1 	bl	8009a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002708:	2100      	movs	r1, #0
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8a9 	bl	8002862 <HAL_PCD_SetAddress>

    return;
 8002710:	e0a4      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800272e:	b292      	uxth	r2, r2
 8002730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002734:	e092      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00c      	beq.n	800275a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002752:	b292      	uxth	r2, r2
 8002754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002758:	e080      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d027      	beq.n	80027b4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0204 	bic.w	r2, r2, #4
 8002776:	b292      	uxth	r2, r2
 8002778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0208 	bic.w	r2, r2, #8
 800278e:	b292      	uxth	r2, r2
 8002790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f007 f9b1 	bl	8009afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ac:	b292      	uxth	r2, r2
 80027ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027b2:	e053      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d027      	beq.n	800280e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0208 	orr.w	r2, r2, #8
 80027d0:	b292      	uxth	r2, r2
 80027d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e8:	b292      	uxth	r2, r2
 80027ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0204 	orr.w	r2, r2, #4
 8002800:	b292      	uxth	r2, r2
 8002802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f007 f95e 	bl	8009ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800280c:	e026      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00f      	beq.n	8002838 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800282a:	b292      	uxth	r2, r2
 800282c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f007 f91c 	bl	8009a6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002836:	e011      	b.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800285a:	bf00      	nop
  }
}
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_SetAddress+0x1a>
 8002878:	2302      	movs	r3, #2
 800287a:	e013      	b.n	80028a4 <HAL_PCD_SetAddress+0x42>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f005 fa24 	bl	8007ce2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	70fb      	strb	r3, [r7, #3]
 80028be:	460b      	mov	r3, r1
 80028c0:	803b      	strh	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da0e      	bge.n	80028f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	705a      	strb	r2, [r3, #1]
 80028ee:	e00e      	b.n	800290e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0207 	and.w	r2, r3, #7
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800291a:	883a      	ldrh	r2, [r7, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	78ba      	ldrb	r2, [r7, #2]
 8002924:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002926:	78bb      	ldrb	r3, [r7, #2]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d102      	bne.n	8002932 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_PCD_EP_Open+0x94>
 800293c:	2302      	movs	r3, #2
 800293e:	e00e      	b.n	800295e <HAL_PCD_EP_Open+0xb2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	4618      	mov	r0, r3
 8002950:	f002 ff66 	bl	8005820 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800295c:	7afb      	ldrb	r3, [r7, #11]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da0e      	bge.n	8002998 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00e      	b.n	80029b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 0207 	and.w	r2, r3, #7
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_EP_Close+0x6a>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e00e      	b.n	80029ee <HAL_PCD_EP_Close+0x88>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fae2 	bl	8005fa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	460b      	mov	r3, r1
 8002a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	f003 0207 	and.w	r2, r3, #7
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2200      	movs	r2, #0
 8002a34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fc9a 	bl	8006382 <USB_EPStartXfer>

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fc4b 	bl	8006382 <USB_EPStartXfer>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 0207 	and.w	r2, r3, #7
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d901      	bls.n	8002b14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e03e      	b.n	8002b92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da0e      	bge.n	8002b3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00c      	b.n	8002b54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_SetStall+0x7e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_SetStall+0x9c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 ffae 	bl	8007ae4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e040      	b.n	8002c3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da0e      	bge.n	8002bde <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	705a      	strb	r2, [r3, #1]
 8002bdc:	e00e      	b.n	8002bfc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 0207 	and.w	r2, r3, #7
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_PCD_EP_ClrStall+0x82>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e00e      	b.n	8002c3a <HAL_PCD_EP_ClrStall+0xa0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68f9      	ldr	r1, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 ffab 	bl	8007b86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b096      	sub	sp, #88	; 0x58
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c4a:	e3bf      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002c66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8179 	bne.w	8002f62 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d152      	bne.n	8002d22 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	81fb      	strh	r3, [r7, #14]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3328      	adds	r3, #40	; 0x28
 8002ca4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	441a      	add	r2, r3
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cde:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f006 fea9 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 836b 	beq.w	80033cc <PCD_EP_ISR_Handler+0x78a>
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8366 	bne.w	80033cc <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b292      	uxth	r2, r2
 8002d14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d20:	e354      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d28:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d034      	beq.n	8002daa <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	3306      	adds	r3, #6
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d78:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f005 f824 	bl	8007dcc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d90:	4013      	ands	r3, r2
 8002d92:	823b      	strh	r3, [r7, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	8a3a      	ldrh	r2, [r7, #16]
 8002d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f006 fe1c 	bl	80099e0 <HAL_PCD_SetupStageCallback>
 8002da8:	e310      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002daa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f280 830c 	bge.w	80033cc <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	83fb      	strh	r3, [r7, #30]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	8bfa      	ldrh	r2, [r7, #30]
 8002dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dce:	b292      	uxth	r2, r2
 8002dd0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	3306      	adds	r3, #6
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d019      	beq.n	8002e3a <PCD_EP_ISR_Handler+0x1f8>
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d015      	beq.n	8002e3a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	6959      	ldr	r1, [r3, #20]
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f004 ffd4 	bl	8007dcc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e30:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e32:	2100      	movs	r1, #0
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f006 fde5 	bl	8009a04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 82bd 	bne.w	80033cc <PCD_EP_ISR_Handler+0x78a>
 8002e52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e5e:	f000 82b5 	beq.w	80033cc <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b3e      	cmp	r3, #62	; 0x3e
 8002e98:	d91d      	bls.n	8002ed6 <PCD_EP_ISR_Handler+0x294>
 8002e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <PCD_EP_ISR_Handler+0x272>
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	029b      	lsls	r3, r3, #10
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e026      	b.n	8002f24 <PCD_EP_ISR_Handler+0x2e2>
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <PCD_EP_ISR_Handler+0x2b2>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	e017      	b.n	8002f24 <PCD_EP_ISR_Handler+0x2e2>
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <PCD_EP_ISR_Handler+0x2cc>
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	029b      	lsls	r3, r3, #10
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	827b      	strh	r3, [r7, #18]
 8002f36:	8a7b      	ldrh	r3, [r7, #18]
 8002f38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f3c:	827b      	strh	r3, [r7, #18]
 8002f3e:	8a7b      	ldrh	r3, [r7, #18]
 8002f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f44:	827b      	strh	r3, [r7, #18]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	8a7b      	ldrh	r3, [r7, #18]
 8002f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8013      	strh	r3, [r2, #0]
 8002f60:	e234      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f76:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f280 80fc 	bge.w	8003178 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f96:	4013      	ands	r3, r2
 8002f98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002fb6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fce:	7b1b      	ldrb	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d125      	bne.n	8003020 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3306      	adds	r3, #6
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003000:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8092 	beq.w	800312e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	6959      	ldr	r1, [r3, #20]
 8003012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003014:	88da      	ldrh	r2, [r3, #6]
 8003016:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800301a:	f004 fed7 	bl	8007dcc <USB_ReadPMA>
 800301e:	e086      	b.n	800312e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003022:	78db      	ldrb	r3, [r3, #3]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d10a      	bne.n	800303e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800302c:	461a      	mov	r2, r3
 800302e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f9d9 	bl	80033e8 <HAL_PCD_EP_DB_Receive>
 8003036:	4603      	mov	r3, r0
 8003038:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800303c:	e077      	b.n	800312e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800306e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800307e:	b29b      	uxth	r3, r3
 8003080:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d024      	beq.n	80030e6 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	3302      	adds	r3, #2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80030c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02e      	beq.n	800312e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	6959      	ldr	r1, [r3, #20]
 80030d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030da:	891a      	ldrh	r2, [r3, #8]
 80030dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030e0:	f004 fe74 	bl	8007dcc <USB_ReadPMA>
 80030e4:	e023      	b.n	800312e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	3306      	adds	r3, #6
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003112:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003120:	6959      	ldr	r1, [r3, #20]
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	895a      	ldrh	r2, [r3, #10]
 8003126:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800312a:	f004 fe4f 	bl	8007dcc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800312e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003136:	441a      	add	r2, r3
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003144:	441a      	add	r2, r3
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <PCD_EP_ISR_Handler+0x51c>
 8003152:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d206      	bcs.n	800316c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800315e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f006 fc4d 	bl	8009a04 <HAL_PCD_DataOutStageCallback>
 800316a:	e005      	b.n	8003178 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003172:	4618      	mov	r0, r3
 8003174:	f003 f905 	bl	8006382 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8123 	beq.w	80033cc <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003186:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	78db      	ldrb	r3, [r3, #3]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 80a2 	bne.w	8003324 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e8:	7b1b      	ldrb	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8093 	beq.w	8003316 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d046      	beq.n	800328a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d126      	bne.n	8003252 <PCD_EP_ISR_Handler+0x610>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	4413      	add	r3, r2
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	011a      	lsls	r2, r3, #4
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	4413      	add	r3, r2
 8003226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003236:	b29a      	uxth	r2, r3
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e061      	b.n	8003316 <PCD_EP_ISR_Handler+0x6d4>
 8003252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d15d      	bne.n	8003316 <PCD_EP_ISR_Handler+0x6d4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	4413      	add	r3, r2
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	011a      	lsls	r2, r3, #4
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	4413      	add	r3, r2
 800327c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	e045      	b.n	8003316 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d126      	bne.n	80032e6 <PCD_EP_ISR_Handler+0x6a4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	4413      	add	r3, r2
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	011a      	lsls	r2, r3, #4
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	4413      	add	r3, r2
 80032ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	e017      	b.n	8003316 <PCD_EP_ISR_Handler+0x6d4>
 80032e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d113      	bne.n	8003316 <PCD_EP_ISR_Handler+0x6d4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	4413      	add	r3, r2
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	011a      	lsls	r2, r3, #4
 8003306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003308:	4413      	add	r3, r2
 800330a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	2200      	movs	r2, #0
 8003314:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f006 fb8c 	bl	8009a3a <HAL_PCD_DataInStageCallback>
 8003322:	e053      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003324:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d146      	bne.n	80033be <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	3302      	adds	r3, #2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003358:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800335c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003364:	429a      	cmp	r2, r3
 8003366:	d907      	bls.n	8003378 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003370:	1ad2      	subs	r2, r2, r3
 8003372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003374:	619a      	str	r2, [r3, #24]
 8003376:	e002      	b.n	800337e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f006 fb54 	bl	8009a3a <HAL_PCD_DataInStageCallback>
 8003392:	e01b      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800339c:	441a      	add	r2, r3
 800339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033aa:	441a      	add	r2, r3
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 ffe3 	bl	8006382 <USB_EPStartXfer>
 80033bc:	e006      	b.n	80033cc <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033c2:	461a      	mov	r2, r3
 80033c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f91b 	bl	8003602 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f6ff ac37 	blt.w	8002c4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3758      	adds	r7, #88	; 0x58
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d07e      	beq.n	80034fe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	3302      	adds	r3, #2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	8b7b      	ldrh	r3, [r7, #26]
 8003430:	429a      	cmp	r2, r3
 8003432:	d306      	bcc.n	8003442 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	8b7b      	ldrh	r3, [r7, #26]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	e002      	b.n	8003448 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d123      	bne.n	8003498 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	833b      	strh	r3, [r7, #24]
 800346c:	8b3b      	ldrh	r3, [r7, #24]
 800346e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003472:	833b      	strh	r3, [r7, #24]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	8b3b      	ldrh	r3, [r7, #24]
 8003484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	b29b      	uxth	r3, r3
 8003496:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01f      	beq.n	80034e2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	82fb      	strh	r3, [r7, #22]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	8afb      	ldrh	r3, [r7, #22]
 80034ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034de:	b29b      	uxth	r3, r3
 80034e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034e2:	8b7b      	ldrh	r3, [r7, #26]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6959      	ldr	r1, [r3, #20]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	891a      	ldrh	r2, [r3, #8]
 80034f6:	8b7b      	ldrh	r3, [r7, #26]
 80034f8:	f004 fc68 	bl	8007dcc <USB_ReadPMA>
 80034fc:	e07c      	b.n	80035f8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	3306      	adds	r3, #6
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003526:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	8b7b      	ldrh	r3, [r7, #26]
 800352e:	429a      	cmp	r2, r3
 8003530:	d306      	bcc.n	8003540 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	8b7b      	ldrh	r3, [r7, #26]
 8003538:	1ad2      	subs	r2, r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	619a      	str	r2, [r3, #24]
 800353e:	e002      	b.n	8003546 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d123      	bne.n	8003596 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	83fb      	strh	r3, [r7, #30]
 800356a:	8bfb      	ldrh	r3, [r7, #30]
 800356c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003570:	83fb      	strh	r3, [r7, #30]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	441a      	add	r2, r3
 8003580:	8bfb      	ldrh	r3, [r7, #30]
 8003582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003592:	b29b      	uxth	r3, r3
 8003594:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11f      	bne.n	80035e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	83bb      	strh	r3, [r7, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	8bbb      	ldrh	r3, [r7, #28]
 80035cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035e0:	8b7b      	ldrh	r3, [r7, #26]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6959      	ldr	r1, [r3, #20]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	895a      	ldrh	r2, [r3, #10]
 80035f2:	8b7b      	ldrh	r3, [r7, #26]
 80035f4:	f004 fbea 	bl	8007dcc <USB_ReadPMA>
    }
  }

  return count;
 80035f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b0a4      	sub	sp, #144	; 0x90
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	4613      	mov	r3, r2
 800360e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 81dd 	beq.w	80039d6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	3302      	adds	r3, #2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003644:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003650:	429a      	cmp	r2, r3
 8003652:	d907      	bls.n	8003664 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800365c:	1ad2      	subs	r2, r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	619a      	str	r2, [r3, #24]
 8003662:	e002      	b.n	800366a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 80b9 	bne.w	80037e6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d126      	bne.n	80036ca <HAL_PCD_EP_DB_Transmit+0xc8>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	4413      	add	r3, r2
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	011a      	lsls	r2, r3, #4
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	4413      	add	r3, r2
 800369e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	e01a      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d116      	bne.n	8003700 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	4413      	add	r3, r2
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	011a      	lsls	r2, r3, #4
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	4413      	add	r3, r2
 80036f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d126      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x15a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371c:	b29b      	uxth	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	011a      	lsls	r2, r3, #4
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	b29a      	uxth	r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003754:	b29a      	uxth	r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e017      	b.n	800378c <HAL_PCD_EP_DB_Transmit+0x18a>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d113      	bne.n	800378c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	4413      	add	r3, r2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	011a      	lsls	r2, r3, #4
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	4413      	add	r3, r2
 8003780:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	2200      	movs	r2, #0
 800378a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f006 f951 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 82fc 	beq.w	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	82fb      	strh	r3, [r7, #22]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	8afb      	ldrh	r3, [r7, #22]
 80037d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8013      	strh	r3, [r2, #0]
 80037e4:	e2da      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d021      	beq.n	8003834 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	b29b      	uxth	r3, r3
 8003832:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800383a:	2b01      	cmp	r3, #1
 800383c:	f040 82ae 	bne.w	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003848:	441a      	add	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003856:	441a      	add	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d30b      	bcc.n	8003880 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	621a      	str	r2, [r3, #32]
 800387e:	e017      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d108      	bne.n	800389a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800388c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003898:	e00a      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d165      	bne.n	8003984 <HAL_PCD_EP_DB_Transmit+0x382>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038cc:	4413      	add	r3, r2
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	011a      	lsls	r2, r3, #4
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	4413      	add	r3, r2
 80038da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f4:	2b3e      	cmp	r3, #62	; 0x3e
 80038f6:	d91d      	bls.n	8003934 <HAL_PCD_EP_DB_Transmit+0x332>
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <HAL_PCD_EP_DB_Transmit+0x310>
 800390c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390e:	3b01      	subs	r3, #1
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29a      	uxth	r2, r3
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	b29b      	uxth	r3, r3
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	b29b      	uxth	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392c:	b29a      	uxth	r2, r3
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e044      	b.n	80039be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_PCD_EP_DB_Transmit+0x350>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800394a:	b29a      	uxth	r2, r3
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	e035      	b.n	80039be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
 800395a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003968:	3301      	adds	r3, #1
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29a      	uxth	r2, r3
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	b29b      	uxth	r3, r3
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	b29b      	uxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b29a      	uxth	r2, r3
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e01c      	b.n	80039be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d118      	bne.n	80039be <HAL_PCD_EP_DB_Transmit+0x3bc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a0:	4413      	add	r3, r2
 80039a2:	647b      	str	r3, [r7, #68]	; 0x44
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	011a      	lsls	r2, r3, #4
 80039aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ac:	4413      	add	r3, r2
 80039ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
 80039b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6959      	ldr	r1, [r3, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	891a      	ldrh	r2, [r3, #8]
 80039ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f004 f9b6 	bl	8007d40 <USB_WritePMA>
 80039d4:	e1e2      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	3306      	adds	r3, #6
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d307      	bcc.n	8003a1e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e002      	b.n	8003a24 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 80c0 	bne.w	8003bae <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d126      	bne.n	8003a84 <HAL_PCD_EP_DB_Transmit+0x482>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	011a      	lsls	r2, r3, #4
 8003a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	e01a      	b.n	8003aba <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d116      	bne.n	8003aba <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	667b      	str	r3, [r7, #100]	; 0x64
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa0:	4413      	add	r3, r2
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	011a      	lsls	r2, r3, #4
 8003aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aac:	4413      	add	r3, r2
 8003aae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	677b      	str	r3, [r7, #116]	; 0x74
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d12b      	bne.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	4413      	add	r3, r2
 8003ade:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	e017      	b.n	8003b50 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d113      	bne.n	8003b50 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	4413      	add	r3, r2
 8003b38:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	011a      	lsls	r2, r3, #4
 8003b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b42:	4413      	add	r3, r2
 8003b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b48:	673b      	str	r3, [r7, #112]	; 0x70
 8003b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f005 ff6f 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 811a 	bne.w	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]
 8003bac:	e0f6      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d121      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 80ca 	bne.w	8003d9c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c10:	441a      	add	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c1e:	441a      	add	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d30b      	bcc.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6a1a      	ldr	r2, [r3, #32]
 8003c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c40:	1ad2      	subs	r2, r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	621a      	str	r2, [r3, #32]
 8003c46:	e017      	b.n	8003c78 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003c50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c60:	e00a      	b.n	8003c78 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d165      	bne.n	8003d52 <HAL_PCD_EP_DB_Transmit+0x750>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9a:	4413      	add	r3, r2
 8003c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	011a      	lsls	r2, r3, #4
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8003cc4:	d91d      	bls.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x700>
 8003cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e041      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	e032      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x738>
 8003d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d36:	3301      	adds	r3, #1
 8003d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	e019      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	785b      	ldrb	r3, [r3, #1]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d115      	bne.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	4413      	add	r3, r2
 8003d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	011a      	lsls	r2, r3, #4
 8003d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d74:	4413      	add	r3, r2
 8003d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6959      	ldr	r1, [r3, #20]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	895a      	ldrh	r2, [r3, #10]
 8003d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 ffd2 	bl	8007d40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db6:	82bb      	strh	r3, [r7, #20]
 8003db8:	8abb      	ldrh	r3, [r7, #20]
 8003dba:	f083 0310 	eor.w	r3, r3, #16
 8003dbe:	82bb      	strh	r3, [r7, #20]
 8003dc0:	8abb      	ldrh	r3, [r7, #20]
 8003dc2:	f083 0320 	eor.w	r3, r3, #32
 8003dc6:	82bb      	strh	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	8abb      	ldrh	r3, [r7, #20]
 8003dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3790      	adds	r7, #144	; 0x90
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
 8003e04:	4613      	mov	r3, r2
 8003e06:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e08:	897b      	ldrh	r3, [r7, #10]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e14:	897b      	ldrh	r3, [r7, #10]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e009      	b.n	8003e40 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e2c:	897a      	ldrh	r2, [r7, #10]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	80da      	strh	r2, [r3, #6]
 8003e54:	e00b      	b.n	8003e6e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f001 b823 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 817d 	beq.w	80041b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003eb8:	4bbc      	ldr	r3, [pc, #752]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d00c      	beq.n	8003ede <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ec4:	4bb9      	ldr	r3, [pc, #740]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d15c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x10e>
 8003ed0:	4bb6      	ldr	r3, [pc, #728]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d155      	bne.n	8003f8a <HAL_RCC_OscConfig+0x10e>
 8003ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ef2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_RCC_OscConfig+0x94>
 8003f0a:	4ba8      	ldr	r3, [pc, #672]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0xc0>
 8003f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003f38:	4b9c      	ldr	r3, [pc, #624]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f002 021f 	and.w	r2, r2, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 811f 	beq.w	80041b0 <HAL_RCC_OscConfig+0x334>
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8116 	bne.w	80041b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f000 bfaf 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x12e>
 8003f9c:	4b83      	ldr	r3, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a82      	ldr	r2, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e036      	b.n	8004018 <HAL_RCC_OscConfig+0x19c>
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x158>
 8003fba:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7b      	ldr	r2, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b79      	ldr	r3, [pc, #484]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a78      	ldr	r2, [pc, #480]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e021      	b.n	8004018 <HAL_RCC_OscConfig+0x19c>
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x184>
 8003fe6:	4b71      	ldr	r3, [pc, #452]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a70      	ldr	r2, [pc, #448]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6d      	ldr	r2, [pc, #436]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x19c>
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a69      	ldr	r2, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004018:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f023 020f 	bic.w	r2, r3, #15
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	495f      	ldr	r1, [pc, #380]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 800402e:	4313      	orrs	r3, r2
 8004030:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d059      	beq.n	80040f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f849 	bl	80010d8 <HAL_GetTick>
 8004046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd f844 	bl	80010d8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d902      	bls.n	8004062 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	f000 bf43 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004066:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004076:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0x218>
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	e015      	b.n	80040c0 <HAL_RCC_OscConfig+0x244>
 8004094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004098:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80040a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80040b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80040c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80040cc:	fa92 f2a2 	rbit	r2, r2
 80040d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80040d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ab      	beq.n	800404c <HAL_RCC_OscConfig+0x1d0>
 80040f4:	e05d      	b.n	80041b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fc ffef 	bl	80010d8 <HAL_GetTick>
 80040fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004100:	f7fc ffea 	bl	80010d8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d902      	bls.n	8004116 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	f000 bee9 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800411a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800412a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d102      	bne.n	8004148 <HAL_RCC_OscConfig+0x2cc>
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	e015      	b.n	8004174 <HAL_RCC_OscConfig+0x2f8>
 8004148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800414c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800415c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004160:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004164:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_RCC_OscConfig+0x330>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004178:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800417c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004180:	fa92 f2a2 	rbit	r2, r2
 8004184:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004188:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f042 0220 	orr.w	r2, r2, #32
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f002 021f 	and.w	r2, r2, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ab      	bne.n	8004100 <HAL_RCC_OscConfig+0x284>
 80041a8:	e003      	b.n	80041b2 <HAL_RCC_OscConfig+0x336>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 817d 	beq.w	80044c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041c8:	4ba6      	ldr	r3, [pc, #664]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041d4:	4ba3      	ldr	r3, [pc, #652]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d172      	bne.n	80042c6 <HAL_RCC_OscConfig+0x44a>
 80041e0:	4ba0      	ldr	r3, [pc, #640]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d16c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x44a>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80041fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_RCC_OscConfig+0x3a0>
 8004216:	4b93      	ldr	r3, [pc, #588]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e013      	b.n	8004244 <HAL_RCC_OscConfig+0x3c8>
 800421c:	2302      	movs	r3, #2
 800421e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800422e:	2302      	movs	r3, #2
 8004230:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004234:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004240:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2202      	movs	r2, #2
 8004246:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800424a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800424e:	fa92 f2a2 	rbit	r2, r2
 8004252:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004256:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800425a:	fab2 f282 	clz	r2, r2
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f042 0220 	orr.w	r2, r2, #32
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f002 021f 	and.w	r2, r2, #31
 800426a:	2101      	movs	r1, #1
 800426c:	fa01 f202 	lsl.w	r2, r1, r2
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCC_OscConfig+0x410>
 8004276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f000 be2e 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b75      	ldr	r3, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	21f8      	movs	r1, #248	; 0xf8
 80042a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80042aa:	fa91 f1a1 	rbit	r1, r1
 80042ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80042b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80042b6:	fab1 f181 	clz	r1, r1
 80042ba:	b2c9      	uxtb	r1, r1
 80042bc:	408b      	lsls	r3, r1
 80042be:	4969      	ldr	r1, [pc, #420]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c4:	e0fd      	b.n	80044c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8088 	beq.w	80043e8 <HAL_RCC_OscConfig+0x56c>
 80042d8:	2301      	movs	r3, #1
 80042da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80042ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	461a      	mov	r2, r3
 8004300:	2301      	movs	r3, #1
 8004302:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fc fee8 	bl	80010d8 <HAL_GetTick>
 8004308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430e:	f7fc fee3 	bl	80010d8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	f000 bde2 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004324:	2302      	movs	r3, #2
 8004326:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004336:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x4d8>
 800434e:	4b45      	ldr	r3, [pc, #276]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	e013      	b.n	800437c <HAL_RCC_OscConfig+0x500>
 8004354:	2302      	movs	r3, #2
 8004356:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004366:	2302      	movs	r3, #2
 8004368:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800436c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004378:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2202      	movs	r2, #2
 800437e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004382:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004386:	fa92 f2a2 	rbit	r2, r2
 800438a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800438e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004392:	fab2 f282 	clz	r2, r2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f002 021f 	and.w	r2, r2, #31
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0af      	beq.n	800430e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	21f8      	movs	r1, #248	; 0xf8
 80043c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80043cc:	fa91 f1a1 	rbit	r1, r1
 80043d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80043d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80043d8:	fab1 f181 	clz	r1, r1
 80043dc:	b2c9      	uxtb	r1, r1
 80043de:	408b      	lsls	r3, r1
 80043e0:	4920      	ldr	r1, [pc, #128]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
 80043e6:	e06c      	b.n	80044c2 <HAL_RCC_OscConfig+0x646>
 80043e8:	2301      	movs	r3, #1
 80043ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80043fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	461a      	mov	r2, r3
 8004410:	2300      	movs	r3, #0
 8004412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fc fe60 	bl	80010d8 <HAL_GetTick>
 8004418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441e:	f7fc fe5b 	bl	80010d8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d902      	bls.n	8004434 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	f000 bd5a 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004434:	2302      	movs	r3, #2
 8004436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d104      	bne.n	8004468 <HAL_RCC_OscConfig+0x5ec>
 800445e:	4b01      	ldr	r3, [pc, #4]	; (8004464 <HAL_RCC_OscConfig+0x5e8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	e015      	b.n	8004490 <HAL_RCC_OscConfig+0x614>
 8004464:	40021000 	.word	0x40021000
 8004468:	2302      	movs	r3, #2
 800446a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800447a:	2302      	movs	r3, #2
 800447c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004480:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800448c:	4bc8      	ldr	r3, [pc, #800]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2202      	movs	r2, #2
 8004492:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004496:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800449a:	fa92 f2a2 	rbit	r2, r2
 800449e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80044a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80044a6:	fab2 f282 	clz	r2, r2
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f002 021f 	and.w	r2, r2, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f202 	lsl.w	r2, r1, r2
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ad      	bne.n	800441e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8110 	beq.w	80046f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d079      	beq.n	80045dc <HAL_RCC_OscConfig+0x760>
 80044e8:	2301      	movs	r3, #1
 80044ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	4bab      	ldr	r3, [pc, #684]	; (80047b4 <HAL_RCC_OscConfig+0x938>)
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	461a      	mov	r2, r3
 800450e:	2301      	movs	r3, #1
 8004510:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fc fde1 	bl	80010d8 <HAL_GetTick>
 8004516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451c:	f7fc fddc 	bl	80010d8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d902      	bls.n	8004532 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	f000 bcdb 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004532:	2302      	movs	r3, #2
 8004534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004548:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800458a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458c:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 800458e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004598:	2102      	movs	r1, #2
 800459a:	6019      	str	r1, [r3, #0]
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	fa93 f1a3 	rbit	r1, r3
 80045aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045b2:	6019      	str	r1, [r3, #0]
  return result;
 80045b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0a0      	beq.n	800451c <HAL_RCC_OscConfig+0x6a0>
 80045da:	e08d      	b.n	80046f8 <HAL_RCC_OscConfig+0x87c>
 80045dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	fa93 f2a3 	rbit	r2, r3
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045fe:	601a      	str	r2, [r3, #0]
  return result;
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004608:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x938>)
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	461a      	mov	r2, r3
 800461a:	2300      	movs	r3, #0
 800461c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461e:	f7fc fd5b 	bl	80010d8 <HAL_GetTick>
 8004622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004628:	f7fc fd56 	bl	80010d8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d902      	bls.n	800463e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	f000 bc55 	b.w	8004ee8 <HAL_RCC_OscConfig+0x106c>
 800463e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004642:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004646:	2202      	movs	r2, #2
 8004648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	fa93 f2a3 	rbit	r2, r3
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800466a:	2202      	movs	r2, #2
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004672:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	fa93 f2a3 	rbit	r2, r3
 800467c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468e:	2202      	movs	r2, #2
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80046a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 80046ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046b6:	2102      	movs	r1, #2
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fa93 f1a3 	rbit	r1, r3
 80046c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046d0:	6019      	str	r1, [r3, #0]
  return result;
 80046d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d197      	bne.n	8004628 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 81a1 	beq.w	8004a50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004714:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	61d3      	str	r3, [r2, #28]
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004738:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004742:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004746:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_RCC_OscConfig+0x93c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11a      	bne.n	8004790 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_RCC_OscConfig+0x93c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_RCC_OscConfig+0x93c>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fc fcb7 	bl	80010d8 <HAL_GetTick>
 800476a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	e009      	b.n	8004784 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004770:	f7fc fcb2 	bl	80010d8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b64      	cmp	r3, #100	; 0x64
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e3b1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HAL_RCC_OscConfig+0x93c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ef      	beq.n	8004770 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10d      	bne.n	80047bc <HAL_RCC_OscConfig+0x940>
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <HAL_RCC_OscConfig+0x934>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	e03c      	b.n	8004828 <HAL_RCC_OscConfig+0x9ac>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	10908120 	.word	0x10908120
 80047b8:	40007000 	.word	0x40007000
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x96a>
 80047cc:	4bc1      	ldr	r3, [pc, #772]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	4ac0      	ldr	r2, [pc, #768]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6213      	str	r3, [r2, #32]
 80047d8:	4bbe      	ldr	r3, [pc, #760]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4abd      	ldr	r2, [pc, #756]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6213      	str	r3, [r2, #32]
 80047e4:	e020      	b.n	8004828 <HAL_RCC_OscConfig+0x9ac>
 80047e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x994>
 80047f6:	4bb7      	ldr	r3, [pc, #732]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4ab6      	ldr	r2, [pc, #728]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6213      	str	r3, [r2, #32]
 8004802:	4bb4      	ldr	r3, [pc, #720]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4ab3      	ldr	r2, [pc, #716]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6213      	str	r3, [r2, #32]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x9ac>
 8004810:	4bb0      	ldr	r3, [pc, #704]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4aaf      	ldr	r2, [pc, #700]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6213      	str	r3, [r2, #32]
 800481c:	4bad      	ldr	r3, [pc, #692]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4aac      	ldr	r2, [pc, #688]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8081 	beq.w	800493c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fc fc4d 	bl	80010d8 <HAL_GetTick>
 800483e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc fc48 	bl	80010d8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e345      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
 800485c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004860:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004864:	2202      	movs	r2, #2
 8004866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004888:	2202      	movs	r2, #2
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004890:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	fa93 f2a3 	rbit	r2, r3
 800489a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048a2:	601a      	str	r2, [r3, #0]
  return result;
 80048a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_OscConfig+0xa4c>
 80048c2:	4b84      	ldr	r3, [pc, #528]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	e013      	b.n	80048f0 <HAL_RCC_OscConfig+0xa74>
 80048c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048d0:	2202      	movs	r2, #2
 80048d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	fa93 f2a3 	rbit	r2, r3
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048f8:	2102      	movs	r1, #2
 80048fa:	6011      	str	r1, [r2, #0]
 80048fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004900:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	fa92 f1a2 	rbit	r1, r2
 800490a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800490e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004912:	6011      	str	r1, [r2, #0]
  return result;
 8004914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004918:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	fab2 f282 	clz	r2, r2
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	f002 021f 	and.w	r2, r2, #31
 800492e:	2101      	movs	r1, #1
 8004930:	fa01 f202 	lsl.w	r2, r1, r2
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d084      	beq.n	8004844 <HAL_RCC_OscConfig+0x9c8>
 800493a:	e07f      	b.n	8004a3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493c:	f7fc fbcc 	bl	80010d8 <HAL_GetTick>
 8004940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004944:	e00b      	b.n	800495e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fc fbc7 	bl	80010d8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e2c4      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004966:	2202      	movs	r2, #2
 8004968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	fa93 f2a3 	rbit	r2, r3
 8004978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004986:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800498a:	2202      	movs	r2, #2
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	fa93 f2a3 	rbit	r2, r3
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80049a4:	601a      	str	r2, [r3, #0]
  return result;
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80049ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f043 0302 	orr.w	r3, r3, #2
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_OscConfig+0xb4e>
 80049c4:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	e013      	b.n	80049f2 <HAL_RCC_OscConfig+0xb76>
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049d2:	2202      	movs	r2, #2
 80049d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	fa93 f2a3 	rbit	r2, r3
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	4b39      	ldr	r3, [pc, #228]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049fa:	2102      	movs	r1, #2
 80049fc:	6011      	str	r1, [r2, #0]
 80049fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	fa92 f1a2 	rbit	r1, r2
 8004a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a14:	6011      	str	r1, [r2, #0]
  return result;
 8004a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	fab2 f282 	clz	r2, r2
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	f002 021f 	and.w	r2, r2, #31
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f202 	lsl.w	r2, r1, r2
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d184      	bne.n	8004946 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8242 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <HAL_RCC_OscConfig+0xc58>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	f000 8213 	beq.w	8004e96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	f040 8162 	bne.w	8004d46 <HAL_RCC_OscConfig+0xeca>
 8004a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	fa93 f2a3 	rbit	r2, r3
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004aa6:	601a      	str	r2, [r3, #0]
  return result;
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004ab0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fc fb06 	bl	80010d8 <HAL_GetTick>
 8004acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad0:	e00c      	b.n	8004aec <HAL_RCC_OscConfig+0xc70>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fc fafe 	bl	80010d8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e1fd      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	fa93 f2a3 	rbit	r2, r3
 8004b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b10:	601a      	str	r2, [r3, #0]
  return result;
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_RCC_OscConfig+0xcba>
 8004b30:	4bb0      	ldr	r3, [pc, #704]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	e027      	b.n	8004b86 <HAL_RCC_OscConfig+0xd0a>
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	fa93 f2a3 	rbit	r2, r3
 8004b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	fa93 f2a3 	rbit	r2, r3
 8004b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	4b9c      	ldr	r3, [pc, #624]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b92:	6011      	str	r1, [r2, #0]
 8004b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	fa92 f1a2 	rbit	r1, r2
 8004ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004baa:	6011      	str	r1, [r2, #0]
  return result;
 8004bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	fab2 f282 	clz	r2, r2
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	f042 0220 	orr.w	r2, r2, #32
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	f002 021f 	and.w	r2, r2, #31
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d182      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bd2:	4b88      	ldr	r3, [pc, #544]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	497f      	ldr	r1, [pc, #508]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
 8004bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004c02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	fa93 f2a3 	rbit	r2, r3
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c1e:	601a      	str	r2, [r3, #0]
  return result;
 8004c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fc fa4a 	bl	80010d8 <HAL_GetTick>
 8004c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c48:	e009      	b.n	8004c5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4a:	f7fc fa45 	bl	80010d8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e144      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	fa93 f2a3 	rbit	r2, r3
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c82:	601a      	str	r2, [r3, #0]
  return result;
 8004c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xe2c>
 8004ca2:	4b54      	ldr	r3, [pc, #336]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	e027      	b.n	8004cf8 <HAL_RCC_OscConfig+0xe7c>
 8004ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	fa93 f2a3 	rbit	r2, r3
 8004cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	fa93 f2a3 	rbit	r2, r3
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	4b3f      	ldr	r3, [pc, #252]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d04:	6011      	str	r1, [r2, #0]
 8004d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	fa92 f1a2 	rbit	r1, r2
 8004d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d1c:	6011      	str	r1, [r2, #0]
  return result;
 8004d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	fab2 f282 	clz	r2, r2
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	f042 0220 	orr.w	r2, r2, #32
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	f002 021f 	and.w	r2, r2, #31
 8004d38:	2101      	movs	r1, #1
 8004d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d082      	beq.n	8004c4a <HAL_RCC_OscConfig+0xdce>
 8004d44:	e0cf      	b.n	8004ee6 <HAL_RCC_OscConfig+0x106a>
 8004d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	fa93 f2a3 	rbit	r2, r3
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d6a:	601a      	str	r2, [r3, #0]
  return result;
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fc f9a4 	bl	80010d8 <HAL_GetTick>
 8004d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d94:	e009      	b.n	8004daa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d96:	f7fc f99f 	bl	80010d8 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e09e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
 8004daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	fa93 f2a3 	rbit	r2, r3
 8004dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dce:	601a      	str	r2, [r3, #0]
  return result;
 8004dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d104      	bne.n	8004df8 <HAL_RCC_OscConfig+0xf7c>
 8004dee:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <HAL_RCC_OscConfig+0xf78>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	e029      	b.n	8004e48 <HAL_RCC_OscConfig+0xfcc>
 8004df4:	40021000 	.word	0x40021000
 8004df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	fa93 f2a3 	rbit	r2, r3
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	fa93 f2a3 	rbit	r2, r3
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_RCC_OscConfig+0x1078>)
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	fa92 f1a2 	rbit	r1, r2
 8004e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e6c:	6011      	str	r1, [r2, #0]
  return result;
 8004e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	fab2 f282 	clz	r2, r2
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	f042 0220 	orr.w	r2, r2, #32
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	f002 021f 	and.w	r2, r2, #31
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d180      	bne.n	8004d96 <HAL_RCC_OscConfig+0xf1a>
 8004e94:	e027      	b.n	8004ee6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e01e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCC_OscConfig+0x1078>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004eb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004eca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b09e      	sub	sp, #120	; 0x78
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e162      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b90      	ldr	r3, [pc, #576]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d910      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	498b      	ldr	r1, [pc, #556]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b89      	ldr	r3, [pc, #548]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e14a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b82      	ldr	r3, [pc, #520]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	497f      	ldr	r1, [pc, #508]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80dc 	beq.w	8005124 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d13c      	bne.n	8004fee <HAL_RCC_ClockConfig+0xf6>
 8004f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	fa93 f3a3 	rbit	r3, r3
 8004f80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f84:	fab3 f383 	clz	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d102      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xa6>
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	e00f      	b.n	8004fbe <HAL_RCC_ClockConfig+0xc6>
 8004f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa6:	fa93 f3a3 	rbit	r3, r3
 8004faa:	667b      	str	r3, [r7, #100]	; 0x64
 8004fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fb4:	fa93 f3a3 	rbit	r3, r3
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc6:	fa92 f2a2 	rbit	r2, r2
 8004fca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fce:	fab2 f282 	clz	r2, r2
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	f042 0220 	orr.w	r2, r2, #32
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	f002 021f 	and.w	r2, r2, #31
 8004fde:	2101      	movs	r1, #1
 8004fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d17b      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0f3      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d13c      	bne.n	8005070 <HAL_RCC_ClockConfig+0x178>
 8004ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d102      	bne.n	8005020 <HAL_RCC_ClockConfig+0x128>
 800501a:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e00f      	b.n	8005040 <HAL_RCC_ClockConfig+0x148>
 8005020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	647b      	str	r3, [r7, #68]	; 0x44
 800502e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005032:	643b      	str	r3, [r7, #64]	; 0x40
 8005034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005044:	63ba      	str	r2, [r7, #56]	; 0x38
 8005046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005048:	fa92 f2a2 	rbit	r2, r2
 800504c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800504e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005050:	fab2 f282 	clz	r2, r2
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	f042 0220 	orr.w	r2, r2, #32
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	f002 021f 	and.w	r2, r2, #31
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f202 	lsl.w	r2, r1, r2
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13a      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0b2      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
 8005070:	2302      	movs	r3, #2
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507e:	fab3 f383 	clz	r3, r3
 8005082:	b2db      	uxtb	r3, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d102      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	e00d      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1bc>
 8005098:	2302      	movs	r3, #2
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
 80050a4:	2302      	movs	r3, #2
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	4b29      	ldr	r3, [pc, #164]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2202      	movs	r2, #2
 80050b6:	61ba      	str	r2, [r7, #24]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	fa92 f2a2 	rbit	r2, r2
 80050be:	617a      	str	r2, [r7, #20]
  return result;
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	fab2 f282 	clz	r2, r2
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	f042 0220 	orr.w	r2, r2, #32
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	f002 021f 	and.w	r2, r2, #31
 80050d2:	2101      	movs	r1, #1
 80050d4:	fa01 f202 	lsl.w	r2, r1, r2
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e079      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f023 0203 	bic.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	491a      	ldr	r1, [pc, #104]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f4:	f7fb fff0 	bl	80010d8 <HAL_GetTick>
 80050f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fb ffec 	bl	80010d8 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e061      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 020c 	and.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	429a      	cmp	r2, r3
 8005122:	d1eb      	bne.n	80050fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d214      	bcs.n	800515c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0207 	bic.w	r2, r3, #7
 800513a:	4906      	ldr	r1, [pc, #24]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e040      	b.n	80051d6 <HAL_RCC_ClockConfig+0x2de>
 8005154:	40022000 	.word	0x40022000
 8005158:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <HAL_RCC_ClockConfig+0x2e8>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	491a      	ldr	r1, [pc, #104]	; (80051e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4912      	ldr	r1, [pc, #72]	; (80051e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800519a:	f000 f829 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 800519e:	4601      	mov	r1, r0
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_RCC_ClockConfig+0x2e8>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	22f0      	movs	r2, #240	; 0xf0
 80051aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	fa92 f2a2 	rbit	r2, r2
 80051b2:	60fa      	str	r2, [r7, #12]
  return result;
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	fab2 f282 	clz	r2, r2
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	40d3      	lsrs	r3, r2
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x2ec>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	fa21 f303 	lsr.w	r3, r1, r3
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_RCC_ClockConfig+0x2f0>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCC_ClockConfig+0x2f4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb ff3e 	bl	8001050 <HAL_InitTick>
  
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3778      	adds	r7, #120	; 0x78
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800a8a0 	.word	0x0800a8a0
 80051e8:	20000038 	.word	0x20000038
 80051ec:	2000003c 	.word	0x2000003c

080051f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b08b      	sub	sp, #44	; 0x2c
 80051f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b04      	cmp	r3, #4
 8005218:	d002      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x30>
 800521a:	2b08      	cmp	r3, #8
 800521c:	d003      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x36>
 800521e:	e03c      	b.n	800529a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005222:	623b      	str	r3, [r7, #32]
      break;
 8005224:	e03c      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800522c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005230:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	fa92 f2a2 	rbit	r2, r2
 8005238:	607a      	str	r2, [r7, #4]
  return result;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	fab2 f282 	clz	r2, r2
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	40d3      	lsrs	r3, r2
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800524a:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	220f      	movs	r2, #15
 8005254:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	fa92 f2a2 	rbit	r2, r2
 800525c:	60fa      	str	r2, [r7, #12]
  return result;
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	fab2 f282 	clz	r2, r2
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	40d3      	lsrs	r3, r2
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800526a:	5cd3      	ldrb	r3, [r2, r3]
 800526c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005278:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
 8005288:	e004      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	623b      	str	r3, [r7, #32]
      break;
 8005298:	e002      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800529c:	623b      	str	r3, [r7, #32]
      break;
 800529e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	372c      	adds	r7, #44	; 0x2c
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	007a1200 	.word	0x007a1200
 80052b8:	0800a8b0 	.word	0x0800a8b0
 80052bc:	0800a8c0 	.word	0x0800a8c0
 80052c0:	003d0900 	.word	0x003d0900

080052c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b092      	sub	sp, #72	; 0x48
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80d4 	beq.w	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e8:	4b4e      	ldr	r3, [pc, #312]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10e      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f4:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4a4a      	ldr	r2, [pc, #296]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	61d3      	str	r3, [r2, #28]
 8005300:	4b48      	ldr	r3, [pc, #288]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005312:	4b45      	ldr	r3, [pc, #276]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531e:	4b42      	ldr	r3, [pc, #264]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005328:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fb fed5 	bl	80010d8 <HAL_GetTick>
 800532e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fb fed1 	bl	80010d8 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b64      	cmp	r3, #100	; 0x64
 800533e:	d901      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e169      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005350:	4b34      	ldr	r3, [pc, #208]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8084 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800536c:	429a      	cmp	r2, r3
 800536e:	d07c      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800538a:	fab3 f383 	clz	r3, r3
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	461a      	mov	r2, r3
 800539a:	2301      	movs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	461a      	mov	r2, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04b      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fb fe81 	bl	80010d8 <HAL_GetTick>
 80053d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fb fe7d 	bl	80010d8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e113      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80053f0:	2302      	movs	r3, #2
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	2302      	movs	r3, #2
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	61fb      	str	r3, [r7, #28]
  return result;
 8005408:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540a:	fab3 f383 	clz	r3, r3
 800540e:	b2db      	uxtb	r3, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d108      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800541e:	4b01      	ldr	r3, [pc, #4]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	e00d      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005424:	40021000 	.word	0x40021000
 8005428:	40007000 	.word	0x40007000
 800542c:	10908100 	.word	0x10908100
 8005430:	2302      	movs	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	4b78      	ldr	r3, [pc, #480]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2202      	movs	r2, #2
 8005442:	613a      	str	r2, [r7, #16]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	fa92 f2a2 	rbit	r2, r2
 800544a:	60fa      	str	r2, [r7, #12]
  return result;
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fab2 f282 	clz	r2, r2
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f002 021f 	and.w	r2, r2, #31
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f202 	lsl.w	r2, r1, r2
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0b7      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800546a:	4b6d      	ldr	r3, [pc, #436]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	496a      	ldr	r1, [pc, #424]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800547c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005484:	4b66      	ldr	r3, [pc, #408]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800549c:	4b60      	ldr	r3, [pc, #384]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	f023 0203 	bic.w	r2, r3, #3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	495d      	ldr	r1, [pc, #372]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ba:	4b59      	ldr	r3, [pc, #356]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4956      	ldr	r1, [pc, #344]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d8:	4b51      	ldr	r3, [pc, #324]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	494e      	ldr	r1, [pc, #312]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f6:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f023 0210 	bic.w	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4947      	ldr	r1, [pc, #284]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005514:	4b42      	ldr	r3, [pc, #264]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	493f      	ldr	r1, [pc, #252]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f023 0220 	bic.w	r2, r3, #32
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	4938      	ldr	r1, [pc, #224]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005550:	4b33      	ldr	r3, [pc, #204]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	4930      	ldr	r1, [pc, #192]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	4929      	ldr	r1, [pc, #164]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4921      	ldr	r1, [pc, #132]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055aa:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	491a      	ldr	r1, [pc, #104]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	4912      	ldr	r1, [pc, #72]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	490b      	ldr	r1, [pc, #44]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	4903      	ldr	r1, [pc, #12]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3748      	adds	r7, #72	; 0x48
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000

08005624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e09d      	b.n	8005772 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005646:	d009      	beq.n	800565c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
 800564e:	e005      	b.n	800565c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fb fbec 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800569c:	d902      	bls.n	80056a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e002      	b.n	80056aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056b2:	d007      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	ea42 0103 	orr.w	r1, r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 0204 	and.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005740:	ea42 0103 	orr.w	r1, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800578a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800578e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4013      	ands	r3, r2
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057de:	b084      	sub	sp, #16
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	f107 0014 	add.w	r0, r7, #20
 80057ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	b004      	add	sp, #16
 800581e:	4770      	bx	lr

08005820 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005820:	b480      	push	{r7}
 8005822:	b09d      	sub	sp, #116	; 0x74
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	78db      	ldrb	r3, [r3, #3]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d81f      	bhi.n	8005892 <USB_ActivateEndpoint+0x72>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <USB_ActivateEndpoint+0x38>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005869 	.word	0x08005869
 800585c:	08005885 	.word	0x08005885
 8005860:	0800589b 	.word	0x0800589b
 8005864:	08005877 	.word	0x08005877
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800586c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005870:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005874:	e012      	b.n	800589c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005876:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800587a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800587e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005882:	e00b      	b.n	800589c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005884:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800588c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005890:	e004      	b.n	800589c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005898:	e000      	b.n	800589c <USB_ActivateEndpoint+0x7c>
      break;
 800589a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	441a      	add	r2, r3
 80058a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	b21a      	sxth	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b21b      	sxth	r3, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	7b1b      	ldrb	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8178 	bne.w	8005c02 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8084 	beq.w	8005a24 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4413      	add	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	011a      	lsls	r2, r3, #4
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	b29b      	uxth	r3, r3
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	827b      	strh	r3, [r7, #18]
 800595e:	8a7b      	ldrh	r3, [r7, #18]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <USB_ActivateEndpoint+0x180>
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	823b      	strh	r3, [r7, #16]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	8a3b      	ldrh	r3, [r7, #16]
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d020      	beq.n	80059ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	81bb      	strh	r3, [r7, #12]
 80059c0:	89bb      	ldrh	r3, [r7, #12]
 80059c2:	f083 0320 	eor.w	r3, r3, #32
 80059c6:	81bb      	strh	r3, [r7, #12]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	89bb      	ldrh	r3, [r7, #12]
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
 80059e8:	e2d5      	b.n	8005f96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	81fb      	strh	r3, [r7, #14]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	89fb      	ldrh	r3, [r7, #14]
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e2b8      	b.n	8005f96 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	4413      	add	r3, r2
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	88db      	ldrh	r3, [r3, #6]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	4413      	add	r3, r2
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b3e      	cmp	r3, #62	; 0x3e
 8005a92:	d91d      	bls.n	8005ad0 <USB_ActivateEndpoint+0x2b0>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <USB_ActivateEndpoint+0x28e>
 8005aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	029b      	lsls	r3, r3, #10
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	4313      	orrs	r3, r2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e026      	b.n	8005b1e <USB_ActivateEndpoint+0x2fe>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <USB_ActivateEndpoint+0x2ce>
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e017      	b.n	8005b1e <USB_ActivateEndpoint+0x2fe>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USB_ActivateEndpoint+0x2e8>
 8005b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b04:	3301      	adds	r3, #1
 8005b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	029b      	lsls	r3, r3, #10
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01b      	beq.n	8005b6e <USB_ActivateEndpoint+0x34e>
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	843b      	strh	r3, [r7, #32]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	8c3b      	ldrh	r3, [r7, #32]
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d124      	bne.n	8005bc0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	83bb      	strh	r3, [r7, #28]
 8005b8e:	8bbb      	ldrh	r3, [r7, #28]
 8005b90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b94:	83bb      	strh	r3, [r7, #28]
 8005b96:	8bbb      	ldrh	r3, [r7, #28]
 8005b98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b9c:	83bb      	strh	r3, [r7, #28]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	441a      	add	r2, r3
 8005ba8:	8bbb      	ldrh	r3, [r7, #28]
 8005baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	8013      	strh	r3, [r2, #0]
 8005bbe:	e1ea      	b.n	8005f96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	83fb      	strh	r3, [r7, #30]
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bde:	83fb      	strh	r3, [r7, #30]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	8bfb      	ldrh	r3, [r7, #30]
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
 8005c00:	e1c9      	b.n	8005f96 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	78db      	ldrb	r3, [r3, #3]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d11e      	bne.n	8005c48 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c20:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e01d      	b.n	8005c84 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c94:	4413      	add	r3, r2
 8005c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	891b      	ldrh	r3, [r3, #8]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	657b      	str	r3, [r7, #84]	; 0x54
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc8:	4413      	add	r3, r2
 8005cca:	657b      	str	r3, [r7, #84]	; 0x54
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cda:	653b      	str	r3, [r7, #80]	; 0x50
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	895b      	ldrh	r3, [r3, #10]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 8093 	bne.w	8005e1c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01b      	beq.n	8005d4a <USB_ActivateEndpoint+0x52a>
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01b      	beq.n	8005d9a <USB_ActivateEndpoint+0x57a>
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005db2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005db4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005db8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dc0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	441a      	add	r2, r3
 8005e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]
 8005e1a:	e0bc      	b.n	8005f96 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <USB_ActivateEndpoint+0x654>
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01d      	beq.n	8005ecc <USB_ActivateEndpoint+0x6ac>
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	78db      	ldrb	r3, [r3, #3]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d024      	beq.n	8005f1e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005eee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ef2:	f083 0320 	eor.w	r3, r3, #32
 8005ef6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]
 8005f1c:	e01d      	b.n	8005f5a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3774      	adds	r7, #116	; 0x74
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop

08005fa8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b08d      	sub	sp, #52	; 0x34
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	7b1b      	ldrb	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 808e 	bne.w	80060d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d044      	beq.n	800604e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	81bb      	strh	r3, [r7, #12]
 8005fd2:	89bb      	ldrh	r3, [r7, #12]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <USB_DeactivateEndpoint+0x6c>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	817b      	strh	r3, [r7, #10]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	897b      	ldrh	r3, [r7, #10]
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	813b      	strh	r3, [r7, #8]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	893b      	ldrh	r3, [r7, #8]
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]
 800604c:	e192      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	827b      	strh	r3, [r7, #18]
 800605c:	8a7b      	ldrh	r3, [r7, #18]
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_DeactivateEndpoint+0xf6>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	823b      	strh	r3, [r7, #16]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8a3b      	ldrh	r3, [r7, #16]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	81fb      	strh	r3, [r7, #14]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
 80060d6:	e14d      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 80a5 	bne.w	800622c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	843b      	strh	r3, [r7, #32]
 80060f0:	8c3b      	ldrh	r3, [r7, #32]
 80060f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <USB_DeactivateEndpoint+0x18a>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	83fb      	strh	r3, [r7, #30]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8bfb      	ldrh	r3, [r7, #30]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	83bb      	strh	r3, [r7, #28]
 8006140:	8bbb      	ldrh	r3, [r7, #28]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01b      	beq.n	8006182 <USB_DeactivateEndpoint+0x1da>
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	837b      	strh	r3, [r7, #26]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	8b7b      	ldrh	r3, [r7, #26]
 800616e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800617e:	b29b      	uxth	r3, r3
 8006180:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	833b      	strh	r3, [r7, #24]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8b3b      	ldrh	r3, [r7, #24]
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	82fb      	strh	r3, [r7, #22]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006208:	82bb      	strh	r3, [r7, #20]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8abb      	ldrh	r3, [r7, #20]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]
 800622a:	e0a3      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800623a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <USB_DeactivateEndpoint+0x2d4>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	857b      	strh	r3, [r7, #42]	; 0x2a
 800628a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <USB_DeactivateEndpoint+0x324>
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	847b      	strh	r3, [r7, #34]	; 0x22
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3734      	adds	r7, #52	; 0x34
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b0c2      	sub	sp, #264	; 0x108
 8006386:	af00      	add	r7, sp, #0
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006390:	6018      	str	r0, [r3, #0]
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 86b7 	bne.w	800711c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d908      	bls.n	80063dc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063da:	e007      	b.n	80063ec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	7b1b      	ldrb	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d13a      	bne.n	8006472 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	88da      	ldrh	r2, [r3, #6]
 8006414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006418:	b29b      	uxth	r3, r3
 800641a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800641e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	f001 fc8c 	bl	8007d40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4413      	add	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	011a      	lsls	r2, r3, #4
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4413      	add	r3, r2
 800645e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	f000 be1f 	b.w	80070b0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	2b02      	cmp	r3, #2
 8006480:	f040 8462 	bne.w	8006d48 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	429a      	cmp	r2, r3
 800649e:	f240 83df 	bls.w	8006c60 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 81c7 	beq.w	80068d2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d177      	bne.n	8006650 <USB_EPStartXfer+0x2ce>
 8006560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	4413      	add	r3, r2
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	011a      	lsls	r2, r3, #4
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	4413      	add	r3, r2
 8006596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b0:	2b3e      	cmp	r3, #62	; 0x3e
 80065b2:	d921      	bls.n	80065f8 <USB_EPStartXfer+0x276>
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USB_EPStartXfer+0x252>
 80065ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ce:	3b01      	subs	r3, #1
 80065d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29a      	uxth	r2, r3
 80065da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065de:	b29b      	uxth	r3, r3
 80065e0:	029b      	lsls	r3, r3, #10
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e050      	b.n	800669a <USB_EPStartXfer+0x318>
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <USB_EPStartXfer+0x294>
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660e:	b29a      	uxth	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e041      	b.n	800669a <USB_EPStartXfer+0x318>
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <USB_EPStartXfer+0x2b4>
 800662c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006630:	3301      	adds	r3, #1
 8006632:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29a      	uxth	r2, r3
 800663c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006640:	b29b      	uxth	r3, r3
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	b29b      	uxth	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e024      	b.n	800669a <USB_EPStartXfer+0x318>
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11c      	bne.n	800669a <USB_EPStartXfer+0x318>
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4413      	add	r3, r2
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	011a      	lsls	r2, r3, #4
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	4413      	add	r3, r2
 800668a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	b29a      	uxth	r2, r3
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	f001 fb39 	bl	8007d40 <USB_WritePMA>
            ep->xfer_buff += len;
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	441a      	add	r2, r3
 80066e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	429a      	cmp	r2, r3
 8006706:	d90f      	bls.n	8006728 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	621a      	str	r2, [r3, #32]
 8006726:	e00e      	b.n	8006746 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d177      	bne.n	8006846 <USB_EPStartXfer+0x4c4>
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	4413      	add	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	4413      	add	r3, r2
 800678c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679c:	b29a      	uxth	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a6:	2b3e      	cmp	r3, #62	; 0x3e
 80067a8:	d921      	bls.n	80067ee <USB_EPStartXfer+0x46c>
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <USB_EPStartXfer+0x448>
 80067c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c4:	3b01      	subs	r3, #1
 80067c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e056      	b.n	800689c <USB_EPStartXfer+0x51a>
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <USB_EPStartXfer+0x48a>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006804:	b29a      	uxth	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	e047      	b.n	800689c <USB_EPStartXfer+0x51a>
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <USB_EPStartXfer+0x4aa>
 8006822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006826:	3301      	adds	r3, #1
 8006828:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006836:	b29b      	uxth	r3, r3
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	b29b      	uxth	r3, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e02a      	b.n	800689c <USB_EPStartXfer+0x51a>
 8006846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d122      	bne.n	800689c <USB_EPStartXfer+0x51a>
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	4413      	add	r3, r2
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	011a      	lsls	r2, r3, #4
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	4413      	add	r3, r2
 800688c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	b29a      	uxth	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	891b      	ldrh	r3, [r3, #8]
 80068a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6959      	ldr	r1, [r3, #20]
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	f001 fa38 	bl	8007d40 <USB_WritePMA>
 80068d0:	e3ee      	b.n	80070b0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d177      	bne.n	80069d2 <USB_EPStartXfer+0x650>
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006902:	4413      	add	r3, r2
 8006904:	64bb      	str	r3, [r7, #72]	; 0x48
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	011a      	lsls	r2, r3, #4
 8006914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006916:	4413      	add	r3, r2
 8006918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
 800691e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006928:	b29a      	uxth	r2, r3
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	2b3e      	cmp	r3, #62	; 0x3e
 8006934:	d921      	bls.n	800697a <USB_EPStartXfer+0x5f8>
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <USB_EPStartXfer+0x5d4>
 800694c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006950:	3b01      	subs	r3, #1
 8006952:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29b      	uxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e056      	b.n	8006a28 <USB_EPStartXfer+0x6a6>
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <USB_EPStartXfer+0x616>
 8006982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006990:	b29a      	uxth	r2, r3
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	801a      	strh	r2, [r3, #0]
 8006996:	e047      	b.n	8006a28 <USB_EPStartXfer+0x6a6>
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <USB_EPStartXfer+0x636>
 80069ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069b2:	3301      	adds	r3, #1
 80069b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	e02a      	b.n	8006a28 <USB_EPStartXfer+0x6a6>
 80069d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d122      	bne.n	8006a28 <USB_EPStartXfer+0x6a6>
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	653b      	str	r3, [r7, #80]	; 0x50
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a02:	4413      	add	r3, r2
 8006a04:	653b      	str	r3, [r7, #80]	; 0x50
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	011a      	lsls	r2, r3, #4
 8006a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a16:	4413      	add	r3, r2
 8006a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	891b      	ldrh	r3, [r3, #8]
 8006a34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6959      	ldr	r1, [r3, #20]
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a4e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a52:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	f001 f972 	bl	8007d40 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	441a      	add	r2, r3
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d90f      	bls.n	8006ab6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	621a      	str	r2, [r3, #32]
 8006ab4:	e00e      	b.n	8006ad4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d177      	bne.n	8006be0 <USB_EPStartXfer+0x85e>
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	4413      	add	r3, r2
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	011a      	lsls	r2, r3, #4
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	2b3e      	cmp	r3, #62	; 0x3e
 8006b42:	d921      	bls.n	8006b88 <USB_EPStartXfer+0x806>
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <USB_EPStartXfer+0x7e2>
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	e050      	b.n	8006c2a <USB_EPStartXfer+0x8a8>
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <USB_EPStartXfer+0x824>
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	e041      	b.n	8006c2a <USB_EPStartXfer+0x8a8>
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <USB_EPStartXfer+0x844>
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	029b      	lsls	r3, r3, #10
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	e024      	b.n	8006c2a <USB_EPStartXfer+0x8a8>
 8006be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d11c      	bne.n	8006c2a <USB_EPStartXfer+0x8a8>
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	4413      	add	r3, r2
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	011a      	lsls	r2, r3, #4
 8006c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c18:	4413      	add	r3, r2
 8006c1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	895b      	ldrh	r3, [r3, #10]
 8006c36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6959      	ldr	r1, [r3, #20]
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c54:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c58:	6800      	ldr	r0, [r0, #0]
 8006c5a:	f001 f871 	bl	8007d40 <USB_WritePMA>
 8006c5e:	e227      	b.n	80070b0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cec:	4413      	add	r3, r2
 8006cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	891b      	ldrh	r3, [r3, #8]
 8006d1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6959      	ldr	r1, [r3, #20]
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d40:	6800      	ldr	r0, [r0, #0]
 8006d42:	f000 fffd 	bl	8007d40 <USB_WritePMA>
 8006d46:	e1b3      	b.n	80070b0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80c6 	beq.w	8006f1a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	673b      	str	r3, [r7, #112]	; 0x70
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d177      	bne.n	8006e9a <USB_EPStartXfer+0xb18>
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dca:	4413      	add	r3, r2
 8006dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	011a      	lsls	r2, r3, #4
 8006ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006de4:	667b      	str	r3, [r7, #100]	; 0x64
 8006de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8006dfc:	d921      	bls.n	8006e42 <USB_EPStartXfer+0xac0>
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <USB_EPStartXfer+0xa9c>
 8006e14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	029b      	lsls	r3, r3, #10
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e050      	b.n	8006ee4 <USB_EPStartXfer+0xb62>
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <USB_EPStartXfer+0xade>
 8006e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e041      	b.n	8006ee4 <USB_EPStartXfer+0xb62>
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USB_EPStartXfer+0xafe>
 8006e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e024      	b.n	8006ee4 <USB_EPStartXfer+0xb62>
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d11c      	bne.n	8006ee4 <USB_EPStartXfer+0xb62>
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ebe:	4413      	add	r3, r2
 8006ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	011a      	lsls	r2, r3, #4
 8006ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	895b      	ldrh	r3, [r3, #10]
 8006ef0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6959      	ldr	r1, [r3, #20]
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f12:	6800      	ldr	r0, [r0, #0]
 8006f14:	f000 ff14 	bl	8007d40 <USB_WritePMA>
 8006f18:	e0ca      	b.n	80070b0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d177      	bne.n	800701a <USB_EPStartXfer+0xc98>
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f4a:	4413      	add	r3, r2
 8006f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f5e:	4413      	add	r3, r2
 8006f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7c:	d921      	bls.n	8006fc2 <USB_EPStartXfer+0xc40>
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <USB_EPStartXfer+0xc1c>
 8006f94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	029b      	lsls	r3, r3, #10
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e05c      	b.n	800707c <USB_EPStartXfer+0xcfa>
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <USB_EPStartXfer+0xc5e>
 8006fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e04d      	b.n	800707c <USB_EPStartXfer+0xcfa>
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <USB_EPStartXfer+0xc7e>
 8006ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800700a:	b29b      	uxth	r3, r3
 800700c:	029b      	lsls	r3, r3, #10
 800700e:	b29b      	uxth	r3, r3
 8007010:	4313      	orrs	r3, r2
 8007012:	b29a      	uxth	r2, r3
 8007014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	e030      	b.n	800707c <USB_EPStartXfer+0xcfa>
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d128      	bne.n	800707c <USB_EPStartXfer+0xcfa>
 800702a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704e:	4413      	add	r3, r2
 8007050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	011a      	lsls	r2, r3, #4
 8007062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007066:	4413      	add	r3, r2
 8007068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800706c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	b29a      	uxth	r2, r3
 8007076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800707a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	891b      	ldrh	r3, [r3, #8]
 8007088:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6959      	ldr	r1, [r3, #20]
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	b29b      	uxth	r3, r3
 800709e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	f000 fe48 	bl	8007d40 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	817b      	strh	r3, [r7, #10]
 80070d8:	897b      	ldrh	r3, [r7, #10]
 80070da:	f083 0310 	eor.w	r3, r3, #16
 80070de:	817b      	strh	r3, [r7, #10]
 80070e0:	897b      	ldrh	r3, [r7, #10]
 80070e2:	f083 0320 	eor.w	r3, r3, #32
 80070e6:	817b      	strh	r3, [r7, #10]
 80070e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	441a      	add	r2, r3
 8007102:	897b      	ldrh	r3, [r7, #10]
 8007104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007114:	b29b      	uxth	r3, r3
 8007116:	8013      	strh	r3, [r2, #0]
 8007118:	f000 bcde 	b.w	8007ad8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	7b1b      	ldrb	r3, [r3, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 80bb 	bne.w	80072a4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d917      	bls.n	800717a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800714a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	619a      	str	r2, [r3, #24]
 8007178:	e00e      	b.n	8007198 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800717a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071bc:	4413      	add	r3, r2
 80071be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	011a      	lsls	r2, r3, #4
 80071d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d4:	4413      	add	r3, r2
 80071d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	2b3e      	cmp	r3, #62	; 0x3e
 80071f8:	d924      	bls.n	8007244 <USB_EPStartXfer+0xec2>
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USB_EPStartXfer+0xe98>
 8007210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007214:	3b01      	subs	r3, #1
 8007216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800721a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b29b      	uxth	r3, r3
 8007230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800723e:	801a      	strh	r2, [r3, #0]
 8007240:	f000 bc10 	b.w	8007a64 <USB_EPStartXfer+0x16e2>
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10c      	bne.n	8007266 <USB_EPStartXfer+0xee4>
 800724c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725c:	b29a      	uxth	r2, r3
 800725e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e3fe      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0xf04>
 800727c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29a      	uxth	r2, r3
 800728e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007292:	b29b      	uxth	r3, r3
 8007294:	029b      	lsls	r3, r3, #10
 8007296:	b29b      	uxth	r3, r3
 8007298:	4313      	orrs	r3, r2
 800729a:	b29a      	uxth	r2, r3
 800729c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	e3df      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80072a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	78db      	ldrb	r3, [r3, #3]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f040 8218 	bne.w	80076e6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 809d 	bne.w	8007402 <USB_EPStartXfer+0x1080>
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ec:	4413      	add	r3, r2
 80072ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	011a      	lsls	r2, r3, #4
 8007300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007304:	4413      	add	r3, r2
 8007306:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800730a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800730e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b3e      	cmp	r3, #62	; 0x3e
 8007330:	d92b      	bls.n	800738a <USB_EPStartXfer+0x1008>
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <USB_EPStartXfer+0xfe0>
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	3b01      	subs	r3, #1
 800735e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e070      	b.n	800746c <USB_EPStartXfer+0x10ea>
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10c      	bne.n	80073b4 <USB_EPStartXfer+0x1032>
 800739a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	e05b      	b.n	800746c <USB_EPStartXfer+0x10ea>
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <USB_EPStartXfer+0x1062>
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	3301      	adds	r3, #1
 80073e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e034      	b.n	800746c <USB_EPStartXfer+0x10ea>
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d12c      	bne.n	800746c <USB_EPStartXfer+0x10ea>
 8007412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007436:	4413      	add	r3, r2
 8007438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	011a      	lsls	r2, r3, #4
 800744a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800744e:	4413      	add	r3, r2
 8007450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800747a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f040 809d 	bne.w	80075c6 <USB_EPStartXfer+0x1244>
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800749a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b0:	4413      	add	r3, r2
 80074b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	011a      	lsls	r2, r3, #4
 80074c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b3e      	cmp	r3, #62	; 0x3e
 80074f4:	d92b      	bls.n	800754e <USB_EPStartXfer+0x11cc>
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <USB_EPStartXfer+0x11a4>
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007520:	3b01      	subs	r3, #1
 8007522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	e069      	b.n	8007622 <USB_EPStartXfer+0x12a0>
 800754e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10c      	bne.n	8007578 <USB_EPStartXfer+0x11f6>
 800755e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e054      	b.n	8007622 <USB_EPStartXfer+0x12a0>
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800758a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <USB_EPStartXfer+0x1226>
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	029b      	lsls	r3, r3, #10
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	4313      	orrs	r3, r2
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	e02d      	b.n	8007622 <USB_EPStartXfer+0x12a0>
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d125      	bne.n	8007622 <USB_EPStartXfer+0x12a0>
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075ec:	4413      	add	r3, r2
 80075ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	011a      	lsls	r2, r3, #4
 8007600:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007604:	4413      	add	r3, r2
 8007606:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800760a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	b29a      	uxth	r2, r3
 800761c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007620:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8218 	beq.w	8007a64 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007654:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <USB_EPStartXfer+0x12ea>
 8007660:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10d      	bne.n	8007688 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800766c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 81f5 	bne.w	8007a64 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800767a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	f040 81ee 	bne.w	8007a64 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80076d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	8013      	strh	r3, [r2, #0]
 80076e4:	e1be      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	78db      	ldrb	r3, [r3, #3]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	f040 81b4 	bne.w	8007a60 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d917      	bls.n	8007744 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	619a      	str	r2, [r3, #24]
 8007742:	e00e      	b.n	8007762 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 8085 	bne.w	800787e <USB_EPStartXfer+0x14fc>
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007798:	4413      	add	r3, r2
 800779a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	011a      	lsls	r2, r3, #4
 80077ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d2:	2b3e      	cmp	r3, #62	; 0x3e
 80077d4:	d923      	bls.n	800781e <USB_EPStartXfer+0x149c>
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <USB_EPStartXfer+0x1474>
 80077ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f0:	3b01      	subs	r3, #1
 80077f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	e060      	b.n	80078e0 <USB_EPStartXfer+0x155e>
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10c      	bne.n	8007840 <USB_EPStartXfer+0x14be>
 8007826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e04f      	b.n	80078e0 <USB_EPStartXfer+0x155e>
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800784a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <USB_EPStartXfer+0x14de>
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785a:	3301      	adds	r3, #1
 800785c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800786c:	b29b      	uxth	r3, r3
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29a      	uxth	r2, r3
 8007876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	e030      	b.n	80078e0 <USB_EPStartXfer+0x155e>
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d128      	bne.n	80078e0 <USB_EPStartXfer+0x155e>
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b2:	4413      	add	r3, r2
 80078b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	011a      	lsls	r2, r3, #4
 80078c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ca:	4413      	add	r3, r2
 80078cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d8:	b29a      	uxth	r2, r3
 80078da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 8085 	bne.w	8007a0a <USB_EPStartXfer+0x1688>
 8007900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800790e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007924:	4413      	add	r3, r2
 8007926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	011a      	lsls	r2, r3, #4
 8007938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800793c:	4413      	add	r3, r2
 800793e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007952:	b29a      	uxth	r2, r3
 8007954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795e:	2b3e      	cmp	r3, #62	; 0x3e
 8007960:	d923      	bls.n	80079aa <USB_EPStartXfer+0x1628>
 8007962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800796c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <USB_EPStartXfer+0x1600>
 8007978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800797c:	3b01      	subs	r3, #1
 800797e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29a      	uxth	r2, r3
 800798a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798e:	b29b      	uxth	r3, r3
 8007990:	029b      	lsls	r3, r3, #10
 8007992:	b29b      	uxth	r3, r3
 8007994:	4313      	orrs	r3, r2
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e05c      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10c      	bne.n	80079cc <USB_EPStartXfer+0x164a>
 80079b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e04b      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <USB_EPStartXfer+0x166a>
 80079e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e6:	3301      	adds	r3, #1
 80079e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e02c      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
 8007a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d124      	bne.n	8007a64 <USB_EPStartXfer+0x16e2>
 8007a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a30:	4413      	add	r3, r2
 8007a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	011a      	lsls	r2, r3, #4
 8007a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a48:	4413      	add	r3, r2
 8007a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e001      	b.n	8007a64 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e03a      	b.n	8007ada <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aa2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d020      	beq.n	8007b38 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0c:	81bb      	strh	r3, [r7, #12]
 8007b0e:	89bb      	ldrh	r3, [r7, #12]
 8007b10:	f083 0310 	eor.w	r3, r3, #16
 8007b14:	81bb      	strh	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	89bb      	ldrh	r3, [r7, #12]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
 8007b36:	e01f      	b.n	8007b78 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	81fb      	strh	r3, [r7, #14]
 8007b50:	89fb      	ldrh	r3, [r7, #14]
 8007b52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b56:	81fb      	strh	r3, [r7, #14]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	89fb      	ldrh	r3, [r7, #14]
 8007b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b087      	sub	sp, #28
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	7b1b      	ldrb	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 809d 	bne.w	8007cd4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04c      	beq.n	8007c3c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	823b      	strh	r3, [r7, #16]
 8007bb0:	8a3b      	ldrh	r3, [r7, #16]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01b      	beq.n	8007bf2 <USB_EPClearStall+0x6c>
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd0:	81fb      	strh	r3, [r7, #14]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	89fb      	ldrh	r3, [r7, #14]
 8007bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d06c      	beq.n	8007cd4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c10:	81bb      	strh	r3, [r7, #12]
 8007c12:	89bb      	ldrh	r3, [r7, #12]
 8007c14:	f083 0320 	eor.w	r3, r3, #32
 8007c18:	81bb      	strh	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	89bb      	ldrh	r3, [r7, #12]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
 8007c3a:	e04b      	b.n	8007cd4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	82fb      	strh	r3, [r7, #22]
 8007c4a:	8afb      	ldrh	r3, [r7, #22]
 8007c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01b      	beq.n	8007c8c <USB_EPClearStall+0x106>
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6a:	82bb      	strh	r3, [r7, #20]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	8abb      	ldrh	r3, [r7, #20]
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	827b      	strh	r3, [r7, #18]
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007caa:	827b      	strh	r3, [r7, #18]
 8007cac:	8a7b      	ldrh	r3, [r7, #18]
 8007cae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cb2:	827b      	strh	r3, [r7, #18]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	8a7b      	ldrh	r3, [r7, #18]
 8007cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2280      	movs	r2, #128	; 0x80
 8007cf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b08b      	sub	sp, #44	; 0x2c
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	460b      	mov	r3, r1
 8007d50:	80fb      	strh	r3, [r7, #6]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d56:	88bb      	ldrh	r3, [r7, #4]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	005a      	lsls	r2, r3, #1
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	e01e      	b.n	8007db8 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	3301      	adds	r3, #1
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	b21a      	sxth	r2, r3
 8007d8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	8a7a      	ldrh	r2, [r7, #18]
 8007d98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	3302      	adds	r3, #2
 8007da4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	3301      	adds	r3, #1
 8007daa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	3301      	adds	r3, #1
 8007db0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	3b01      	subs	r3, #1
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1dd      	bne.n	8007d7a <USB_WritePMA+0x3a>
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	372c      	adds	r7, #44	; 0x2c
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b08b      	sub	sp, #44	; 0x2c
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	80fb      	strh	r3, [r7, #6]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007de2:	88bb      	ldrh	r3, [r7, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	005a      	lsls	r2, r3, #1
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
 8007e04:	e01b      	b.n	8007e3e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	3302      	adds	r3, #2
 8007e12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	3302      	adds	r3, #2
 8007e36:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e0      	bne.n	8007e06 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e44:	88bb      	ldrh	r3, [r7, #4]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	701a      	strb	r2, [r3, #0]
  }
}
 8007e60:	bf00      	nop
 8007e62:	372c      	adds	r7, #44	; 0x2c
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7c1b      	ldrb	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d115      	bne.n	8007eb0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e88:	2202      	movs	r2, #2
 8007e8a:	2181      	movs	r1, #129	; 0x81
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 feb8 	bl	8009c02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 feae 	bl	8009c02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007eae:	e012      	b.n	8007ed6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	2181      	movs	r1, #129	; 0x81
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fea3 	bl	8009c02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ec2:	2340      	movs	r3, #64	; 0x40
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fe9a 	bl	8009c02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	2203      	movs	r2, #3
 8007eda:	2182      	movs	r1, #130	; 0x82
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fe90 	bl	8009c02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ee8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eec:	f001 ffb2 	bl	8009e54 <USBD_static_malloc>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	e026      	b.n	8007f56 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 ff51 	bl	8009de6 <USBD_LL_PrepareReceive>
 8007f44:	e007      	b.n	8007f56 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	2101      	movs	r1, #1
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 ff48 	bl	8009de6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f70:	2181      	movs	r1, #129	; 0x81
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fe6b 	bl	8009c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fe64 	bl	8009c4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f8e:	2182      	movs	r1, #130	; 0x82
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fe5c 	bl	8009c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00e      	beq.n	8007fc4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 ff5a 	bl	8009e70 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d039      	beq.n	800806c <USBD_CDC_Setup+0x9e>
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d17f      	bne.n	80080fc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d029      	beq.n	8008058 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b25b      	sxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	da11      	bge.n	8008032 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800801a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	88d2      	ldrh	r2, [r2, #6]
 8008020:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008022:	6939      	ldr	r1, [r7, #16]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	461a      	mov	r2, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 fa13 	bl	8009456 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008030:	e06b      	b.n	800810a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	785a      	ldrb	r2, [r3, #1]
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	88db      	ldrh	r3, [r3, #6]
 8008040:	b2da      	uxtb	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008048:	6939      	ldr	r1, [r7, #16]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	461a      	mov	r2, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fa2e 	bl	80094b2 <USBD_CtlPrepareRx>
      break;
 8008056:	e058      	b.n	800810a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	7850      	ldrb	r0, [r2, #1]
 8008064:	2200      	movs	r2, #0
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	4798      	blx	r3
      break;
 800806a:	e04e      	b.n	800810a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b0b      	cmp	r3, #11
 8008072:	d02e      	beq.n	80080d2 <USBD_CDC_Setup+0x104>
 8008074:	2b0b      	cmp	r3, #11
 8008076:	dc38      	bgt.n	80080ea <USBD_CDC_Setup+0x11c>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <USBD_CDC_Setup+0xb4>
 800807c:	2b0a      	cmp	r3, #10
 800807e:	d014      	beq.n	80080aa <USBD_CDC_Setup+0xdc>
 8008080:	e033      	b.n	80080ea <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008088:	2b03      	cmp	r3, #3
 800808a:	d107      	bne.n	800809c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	2202      	movs	r2, #2
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f9de 	bl	8009456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800809a:	e02e      	b.n	80080fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 f96e 	bl	8009380 <USBD_CtlError>
            ret = USBD_FAIL;
 80080a4:	2302      	movs	r3, #2
 80080a6:	75fb      	strb	r3, [r7, #23]
          break;
 80080a8:	e027      	b.n	80080fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d107      	bne.n	80080c4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80080b4:	f107 030f 	add.w	r3, r7, #15
 80080b8:	2201      	movs	r2, #1
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f9ca 	bl	8009456 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080c2:	e01a      	b.n	80080fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 f95a 	bl	8009380 <USBD_CtlError>
            ret = USBD_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	75fb      	strb	r3, [r7, #23]
          break;
 80080d0:	e013      	b.n	80080fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d00d      	beq.n	80080f8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 f94e 	bl	8009380 <USBD_CtlError>
            ret = USBD_FAIL;
 80080e4:	2302      	movs	r3, #2
 80080e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080e8:	e006      	b.n	80080f8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f947 	bl	8009380 <USBD_CtlError>
          ret = USBD_FAIL;
 80080f2:	2302      	movs	r3, #2
 80080f4:	75fb      	strb	r3, [r7, #23]
          break;
 80080f6:	e000      	b.n	80080fa <USBD_CDC_Setup+0x12c>
          break;
 80080f8:	bf00      	nop
      }
      break;
 80080fa:	e006      	b.n	800810a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f93e 	bl	8009380 <USBD_CtlError>
      ret = USBD_FAIL;
 8008104:	2302      	movs	r3, #2
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	bf00      	nop
  }

  return ret;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800812e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d03a      	beq.n	80081b0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	331c      	adds	r3, #28
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d029      	beq.n	80081a4 <USBD_CDC_DataIn+0x90>
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	331c      	adds	r3, #28
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	78f9      	ldrb	r1, [r7, #3]
 8008164:	68b8      	ldr	r0, [r7, #8]
 8008166:	460b      	mov	r3, r1
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	4403      	add	r3, r0
 8008170:	3338      	adds	r3, #56	; 0x38
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	fbb2 f1f3 	udiv	r1, r2, r3
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d110      	bne.n	80081a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	331c      	adds	r3, #28
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008196:	78f9      	ldrb	r1, [r7, #3]
 8008198:	2300      	movs	r3, #0
 800819a:	2200      	movs	r2, #0
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fdff 	bl	8009da0 <USBD_LL_Transmit>
 80081a2:	e003      	b.n	80081ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80081b0:	2302      	movs	r3, #2
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fe2a 	bl	8009e2c <USBD_LL_GetRxDataSize>
 80081d8:	4602      	mov	r2, r0
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00d      	beq.n	8008206 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081fe:	4611      	mov	r1, r2
 8008200:	4798      	blx	r3

    return USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	e000      	b.n	8008208 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008206:	2302      	movs	r3, #2
  }
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008226:	2b00      	cmp	r3, #0
 8008228:	d015      	beq.n	8008256 <USBD_CDC_EP0_RxReady+0x46>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008230:	2bff      	cmp	r3, #255	; 0xff
 8008232:	d010      	beq.n	8008256 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008242:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800824a:	b292      	uxth	r2, r2
 800824c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	22ff      	movs	r2, #255	; 0xff
 8008252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2243      	movs	r2, #67	; 0x43
 800826c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	; (800827c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	200000cc 	.word	0x200000cc

08008280 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2243      	movs	r2, #67	; 0x43
 800828c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000088 	.word	0x20000088

080082a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2243      	movs	r2, #67	; 0x43
 80082ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80082ae:	4b03      	ldr	r3, [pc, #12]	; (80082bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000110 	.word	0x20000110

080082c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	220a      	movs	r2, #10
 80082cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80082ce:	4b03      	ldr	r3, [pc, #12]	; (80082dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	20000044 	.word	0x20000044

080082e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082ea:	2302      	movs	r3, #2
 80082ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	4613      	mov	r3, r2
 800831a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008322:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800832c:	88fa      	ldrh	r2, [r7, #6]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008352:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01c      	beq.n	80083be <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838a:	2b00      	cmp	r3, #0
 800838c:	d115      	bne.n	80083ba <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2181      	movs	r1, #129	; 0x81
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fcf5 	bl	8009da0 <USBD_LL_Transmit>

      return USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e002      	b.n	80083c0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80083be:	2302      	movs	r3, #2
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d017      	beq.n	8008412 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7c1b      	ldrb	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f4:	2101      	movs	r1, #1
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fcf5 	bl	8009de6 <USBD_LL_PrepareReceive>
 80083fc:	e007      	b.n	800840e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	2101      	movs	r1, #1
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fcec 	bl	8009de6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	e000      	b.n	8008414 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008430:	2302      	movs	r3, #2
 8008432:	e01a      	b.n	800846a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	79fa      	ldrb	r2, [r7, #7]
 8008460:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f001 fb58 	bl	8009b18 <USBD_LL_Init>

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	e001      	b.n	8008498 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008494:	2302      	movs	r3, #2
 8008496:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fb8c 	bl	8009bcc <USBD_LL_Start>

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084e0:	2302      	movs	r3, #2
 80084e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fedb 	bl	8009306 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	2b02      	cmp	r3, #2
 8008572:	d016      	beq.n	80085a2 <USBD_LL_SetupStage+0x6a>
 8008574:	2b02      	cmp	r3, #2
 8008576:	d81c      	bhi.n	80085b2 <USBD_LL_SetupStage+0x7a>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <USBD_LL_SetupStage+0x4a>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d008      	beq.n	8008592 <USBD_LL_SetupStage+0x5a>
 8008580:	e017      	b.n	80085b2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9ce 	bl	800892c <USBD_StdDevReq>
      break;
 8008590:	e01a      	b.n	80085c8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa30 	bl	8008a00 <USBD_StdItfReq>
      break;
 80085a0:	e012      	b.n	80085c8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa70 	bl	8008a90 <USBD_StdEPReq>
      break;
 80085b0:	e00a      	b.n	80085c8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fb63 	bl	8009c8c <USBD_LL_StallEP>
      break;
 80085c6:	bf00      	nop
  }

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	460b      	mov	r3, r1
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d14b      	bne.n	800867e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d134      	bne.n	8008662 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	429a      	cmp	r2, r3
 8008602:	d919      	bls.n	8008638 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	1ad2      	subs	r2, r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800861a:	429a      	cmp	r2, r3
 800861c:	d203      	bcs.n	8008626 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008622:	b29b      	uxth	r3, r3
 8008624:	e002      	b.n	800862c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800862a:	b29b      	uxth	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 ff5c 	bl	80094ee <USBD_CtlContinueRx>
 8008636:	e038      	b.n	80086aa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800864a:	2b03      	cmp	r3, #3
 800864c:	d105      	bne.n	800865a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 ff59 	bl	8009512 <USBD_CtlSendStatus>
 8008660:	e023      	b.n	80086aa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008668:	2b05      	cmp	r3, #5
 800866a:	d11e      	bne.n	80086aa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008674:	2100      	movs	r1, #0
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f001 fb08 	bl	8009c8c <USBD_LL_StallEP>
 800867c:	e015      	b.n	80086aa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008690:	2b03      	cmp	r3, #3
 8008692:	d108      	bne.n	80086a6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	7afa      	ldrb	r2, [r7, #11]
 800869e:	4611      	mov	r1, r2
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	4798      	blx	r3
 80086a4:	e001      	b.n	80086aa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086a6:	2302      	movs	r3, #2
 80086a8:	e000      	b.n	80086ac <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	460b      	mov	r3, r1
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d17f      	bne.n	80087c8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3314      	adds	r3, #20
 80086cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d15c      	bne.n	8008792 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d915      	bls.n	8008710 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	1ad2      	subs	r2, r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fec6 	bl	800948e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008702:	2300      	movs	r3, #0
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f001 fb6c 	bl	8009de6 <USBD_LL_PrepareReceive>
 800870e:	e04e      	b.n	80087ae <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	6912      	ldr	r2, [r2, #16]
 8008718:	fbb3 f1f2 	udiv	r1, r3, r2
 800871c:	fb01 f202 	mul.w	r2, r1, r2
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11c      	bne.n	8008760 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800872e:	429a      	cmp	r2, r3
 8008730:	d316      	bcc.n	8008760 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800873c:	429a      	cmp	r2, r3
 800873e:	d20f      	bcs.n	8008760 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fea2 	bl	800948e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008752:	2300      	movs	r3, #0
 8008754:	2200      	movs	r2, #0
 8008756:	2100      	movs	r1, #0
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f001 fb44 	bl	8009de6 <USBD_LL_PrepareReceive>
 800875e:	e026      	b.n	80087ae <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008772:	2b03      	cmp	r3, #3
 8008774:	d105      	bne.n	8008782 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008782:	2180      	movs	r1, #128	; 0x80
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f001 fa81 	bl	8009c8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 fed4 	bl	8009538 <USBD_CtlReceiveStatus>
 8008790:	e00d      	b.n	80087ae <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008798:	2b04      	cmp	r3, #4
 800879a:	d004      	beq.n	80087a6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f001 fa6f 	bl	8009c8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d11d      	bne.n	80087f4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fe80 	bl	80084be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087c6:	e015      	b.n	80087f4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00d      	beq.n	80087f0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d108      	bne.n	80087f0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	7afa      	ldrb	r2, [r7, #11]
 80087e8:	4611      	mov	r1, r2
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
 80087ee:	e001      	b.n	80087f4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e000      	b.n	80087f6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f9f8 	bl	8009c02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2240      	movs	r2, #64	; 0x40
 800881e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	2200      	movs	r2, #0
 8008826:	2180      	movs	r1, #128	; 0x80
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 f9ea 	bl	8009c02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2240      	movs	r2, #64	; 0x40
 8008838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6852      	ldr	r2, [r2, #4]
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	4611      	mov	r1, r2
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2204      	movs	r2, #4
 80088b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d105      	bne.n	80088e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008904:	2b03      	cmp	r3, #3
 8008906:	d10b      	bne.n	8008920 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d005      	beq.n	8008952 <USBD_StdDevReq+0x26>
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d84f      	bhi.n	80089ea <USBD_StdDevReq+0xbe>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <USBD_StdDevReq+0x36>
 800894e:	2b20      	cmp	r3, #32
 8008950:	d14b      	bne.n	80089ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
      break;
 8008960:	e048      	b.n	80089f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b09      	cmp	r3, #9
 8008968:	d839      	bhi.n	80089de <USBD_StdDevReq+0xb2>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USBD_StdDevReq+0x44>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	080089c1 	.word	0x080089c1
 8008974:	080089d5 	.word	0x080089d5
 8008978:	080089df 	.word	0x080089df
 800897c:	080089cb 	.word	0x080089cb
 8008980:	080089df 	.word	0x080089df
 8008984:	080089a3 	.word	0x080089a3
 8008988:	08008999 	.word	0x08008999
 800898c:	080089df 	.word	0x080089df
 8008990:	080089b7 	.word	0x080089b7
 8008994:	080089ad 	.word	0x080089ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9dc 	bl	8008d58 <USBD_GetDescriptor>
          break;
 80089a0:	e022      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb3f 	bl	8009028 <USBD_SetAddress>
          break;
 80089aa:	e01d      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fb7e 	bl	80090b0 <USBD_SetConfig>
          break;
 80089b4:	e018      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc07 	bl	80091cc <USBD_GetConfig>
          break;
 80089be:	e013      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc37 	bl	8009236 <USBD_GetStatus>
          break;
 80089c8:	e00e      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc65 	bl	800929c <USBD_SetFeature>
          break;
 80089d2:	e009      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fc74 	bl	80092c4 <USBD_ClrFeature>
          break;
 80089dc:	e004      	b.n	80089e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fccd 	bl	8009380 <USBD_CtlError>
          break;
 80089e6:	bf00      	nop
      }
      break;
 80089e8:	e004      	b.n	80089f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fcc7 	bl	8009380 <USBD_CtlError>
      break;
 80089f2:	bf00      	nop
  }

  return ret;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop

08008a00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d005      	beq.n	8008a26 <USBD_StdItfReq+0x26>
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d82e      	bhi.n	8008a7c <USBD_StdItfReq+0x7c>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <USBD_StdItfReq+0x26>
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d12a      	bne.n	8008a7c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d81d      	bhi.n	8008a6e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d813      	bhi.n	8008a64 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <USBD_StdItfReq+0x78>
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10d      	bne.n	8008a78 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fd58 	bl	8009512 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a62:	e009      	b.n	8008a78 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc8a 	bl	8009380 <USBD_CtlError>
          break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fc85 	bl	8009380 <USBD_CtlError>
          break;
 8008a76:	e000      	b.n	8008a7a <USBD_StdItfReq+0x7a>
          break;
 8008a78:	bf00      	nop
      }
      break;
 8008a7a:	e004      	b.n	8008a86 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fc7e 	bl	8009380 <USBD_CtlError>
      break;
 8008a84:	bf00      	nop
  }

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	889b      	ldrh	r3, [r3, #4]
 8008aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d007      	beq.n	8008ac0 <USBD_StdEPReq+0x30>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	f200 8146 	bhi.w	8008d42 <USBD_StdEPReq+0x2b2>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <USBD_StdEPReq+0x40>
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	f040 8141 	bne.w	8008d42 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
      break;
 8008ace:	e13d      	b.n	8008d4c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d10a      	bne.n	8008af2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4798      	blx	r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	e12d      	b.n	8008d4e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d007      	beq.n	8008b0a <USBD_StdEPReq+0x7a>
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	f300 811b 	bgt.w	8008d36 <USBD_StdEPReq+0x2a6>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d072      	beq.n	8008bea <USBD_StdEPReq+0x15a>
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d03a      	beq.n	8008b7e <USBD_StdEPReq+0xee>
 8008b08:	e115      	b.n	8008d36 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d002      	beq.n	8008b1a <USBD_StdEPReq+0x8a>
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d015      	beq.n	8008b44 <USBD_StdEPReq+0xb4>
 8008b18:	e02b      	b.n	8008b72 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b1a:	7bbb      	ldrb	r3, [r7, #14]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00c      	beq.n	8008b3a <USBD_StdEPReq+0xaa>
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	d009      	beq.n	8008b3a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f8ae 	bl	8009c8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b30:	2180      	movs	r1, #128	; 0x80
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f8aa 	bl	8009c8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b38:	e020      	b.n	8008b7c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fc1f 	bl	8009380 <USBD_CtlError>
              break;
 8008b42:	e01b      	b.n	8008b7c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	885b      	ldrh	r3, [r3, #2]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10e      	bne.n	8008b6a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <USBD_StdEPReq+0xda>
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d008      	beq.n	8008b6a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	88db      	ldrh	r3, [r3, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 f891 	bl	8009c8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fcd1 	bl	8009512 <USBD_CtlSendStatus>

              break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc03 	bl	8009380 <USBD_CtlError>
              break;
 8008b7a:	bf00      	nop
          }
          break;
 8008b7c:	e0e0      	b.n	8008d40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d002      	beq.n	8008b8e <USBD_StdEPReq+0xfe>
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d015      	beq.n	8008bb8 <USBD_StdEPReq+0x128>
 8008b8c:	e026      	b.n	8008bdc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00c      	beq.n	8008bae <USBD_StdEPReq+0x11e>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d009      	beq.n	8008bae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 f874 	bl	8009c8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ba4:	2180      	movs	r1, #128	; 0x80
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f870 	bl	8009c8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bac:	e01c      	b.n	8008be8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fbe5 	bl	8009380 <USBD_CtlError>
              break;
 8008bb6:	e017      	b.n	8008be8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	885b      	ldrh	r3, [r3, #2]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d112      	bne.n	8008be6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 f87b 	bl	8009cca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc9c 	bl	8009512 <USBD_CtlSendStatus>
              }
              break;
 8008bda:	e004      	b.n	8008be6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fbce 	bl	8009380 <USBD_CtlError>
              break;
 8008be4:	e000      	b.n	8008be8 <USBD_StdEPReq+0x158>
              break;
 8008be6:	bf00      	nop
          }
          break;
 8008be8:	e0aa      	b.n	8008d40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d002      	beq.n	8008bfa <USBD_StdEPReq+0x16a>
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d032      	beq.n	8008c5e <USBD_StdEPReq+0x1ce>
 8008bf8:	e097      	b.n	8008d2a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <USBD_StdEPReq+0x180>
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d004      	beq.n	8008c10 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fbb9 	bl	8009380 <USBD_CtlError>
                break;
 8008c0e:	e091      	b.n	8008d34 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da0b      	bge.n	8008c30 <USBD_StdEPReq+0x1a0>
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	3310      	adds	r3, #16
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	e00b      	b.n	8008c48 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	3304      	adds	r3, #4
 8008c48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2202      	movs	r2, #2
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fbfd 	bl	8009456 <USBD_CtlSendData>
              break;
 8008c5c:	e06a      	b.n	8008d34 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da11      	bge.n	8008c8a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	f003 020f 	and.w	r2, r3, #15
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	3318      	adds	r3, #24
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d117      	bne.n	8008cb0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fb7c 	bl	8009380 <USBD_CtlError>
                  break;
 8008c88:	e054      	b.n	8008d34 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	f003 020f 	and.w	r2, r3, #15
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fb69 	bl	8009380 <USBD_CtlError>
                  break;
 8008cae:	e041      	b.n	8008d34 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da0b      	bge.n	8008cd0 <USBD_StdEPReq+0x240>
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	3310      	adds	r3, #16
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3304      	adds	r3, #4
 8008cce:	e00b      	b.n	8008ce8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <USBD_StdEPReq+0x266>
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d103      	bne.n	8008cfe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e00e      	b.n	8008d1c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f800 	bl	8009d08 <USBD_LL_IsStallEP>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2201      	movs	r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	e002      	b.n	8008d1c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fb97 	bl	8009456 <USBD_CtlSendData>
              break;
 8008d28:	e004      	b.n	8008d34 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fb27 	bl	8009380 <USBD_CtlError>
              break;
 8008d32:	bf00      	nop
          }
          break;
 8008d34:	e004      	b.n	8008d40 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb21 	bl	8009380 <USBD_CtlError>
          break;
 8008d3e:	bf00      	nop
      }
      break;
 8008d40:	e004      	b.n	8008d4c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fb1b 	bl	8009380 <USBD_CtlError>
      break;
 8008d4a:	bf00      	nop
  }

  return ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	0a1b      	lsrs	r3, r3, #8
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	2b06      	cmp	r3, #6
 8008d7a:	f200 8128 	bhi.w	8008fce <USBD_GetDescriptor+0x276>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <USBD_GetDescriptor+0x2c>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008db9 	.word	0x08008db9
 8008d8c:	08008df9 	.word	0x08008df9
 8008d90:	08008fcf 	.word	0x08008fcf
 8008d94:	08008fcf 	.word	0x08008fcf
 8008d98:	08008f6f 	.word	0x08008f6f
 8008d9c:	08008f9b 	.word	0x08008f9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	7c12      	ldrb	r2, [r2, #16]
 8008dac:	f107 0108 	add.w	r1, r7, #8
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	60f8      	str	r0, [r7, #12]
      break;
 8008db6:	e112      	b.n	8008fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7c1b      	ldrb	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10d      	bne.n	8008ddc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f107 0208 	add.w	r2, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dda:	e100      	b.n	8008fde <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	f107 0208 	add.w	r2, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	2202      	movs	r2, #2
 8008df4:	701a      	strb	r2, [r3, #0]
      break;
 8008df6:	e0f2      	b.n	8008fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	f200 80ac 	bhi.w	8008f5c <USBD_GetDescriptor+0x204>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <USBD_GetDescriptor+0xb4>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e25 	.word	0x08008e25
 8008e10:	08008e59 	.word	0x08008e59
 8008e14:	08008e8d 	.word	0x08008e8d
 8008e18:	08008ec1 	.word	0x08008ec1
 8008e1c:	08008ef5 	.word	0x08008ef5
 8008e20:	08008f29 	.word	0x08008f29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e46:	e091      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa98 	bl	8009380 <USBD_CtlError>
            err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
          break;
 8008e56:	e089      	b.n	8008f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7c12      	ldrb	r2, [r2, #16]
 8008e70:	f107 0108 	add.w	r1, r7, #8
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7a:	e077      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa7e 	bl	8009380 <USBD_CtlError>
            err++;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	3301      	adds	r3, #1
 8008e88:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8a:	e06f      	b.n	8008f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	7c12      	ldrb	r2, [r2, #16]
 8008ea4:	f107 0108 	add.w	r1, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eae:	e05d      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa64 	bl	8009380 <USBD_CtlError>
            err++;
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ebe:	e055      	b.n	8008f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	7c12      	ldrb	r2, [r2, #16]
 8008ed8:	f107 0108 	add.w	r1, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee2:	e043      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa4a 	bl	8009380 <USBD_CtlError>
            err++;
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef2:	e03b      	b.n	8008f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7c12      	ldrb	r2, [r2, #16]
 8008f0c:	f107 0108 	add.w	r1, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f16:	e029      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa30 	bl	8009380 <USBD_CtlError>
            err++;
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	3301      	adds	r3, #1
 8008f24:	72fb      	strb	r3, [r7, #11]
          break;
 8008f26:	e021      	b.n	8008f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4a:	e00f      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa16 	bl	8009380 <USBD_CtlError>
            err++;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	3301      	adds	r3, #1
 8008f58:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5a:	e007      	b.n	8008f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa0e 	bl	8009380 <USBD_CtlError>
          err++;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	3301      	adds	r3, #1
 8008f68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f6a:	e038      	b.n	8008fde <USBD_GetDescriptor+0x286>
 8008f6c:	e037      	b.n	8008fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7c1b      	ldrb	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7e:	f107 0208 	add.w	r2, r7, #8
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
 8008f86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f88:	e029      	b.n	8008fde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f9f7 	bl	8009380 <USBD_CtlError>
        err++;
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	3301      	adds	r3, #1
 8008f96:	72fb      	strb	r3, [r7, #11]
      break;
 8008f98:	e021      	b.n	8008fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7c1b      	ldrb	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10d      	bne.n	8008fbe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	f107 0208 	add.w	r2, r7, #8
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
 8008fb2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	2207      	movs	r2, #7
 8008fba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fbc:	e00f      	b.n	8008fde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9dd 	bl	8009380 <USBD_CtlError>
        err++;
 8008fc6:	7afb      	ldrb	r3, [r7, #11]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	72fb      	strb	r3, [r7, #11]
      break;
 8008fcc:	e007      	b.n	8008fde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f9d5 	bl	8009380 <USBD_CtlError>
      err++;
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	72fb      	strb	r3, [r7, #11]
      break;
 8008fdc:	bf00      	nop
  }

  if (err != 0U)
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d11c      	bne.n	800901e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <USBD_GetDescriptor+0x2b6>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	88da      	ldrh	r2, [r3, #6]
 8008ff6:	893b      	ldrh	r3, [r7, #8]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	bf28      	it	cs
 8008ffc:	4613      	movcs	r3, r2
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009002:	893b      	ldrh	r3, [r7, #8]
 8009004:	461a      	mov	r2, r3
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa24 	bl	8009456 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d104      	bne.n	8009020 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa7b 	bl	8009512 <USBD_CtlSendStatus>
 800901c:	e000      	b.n	8009020 <USBD_GetDescriptor+0x2c8>
    return;
 800901e:	bf00      	nop
    }
  }
}
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop

08009028 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	889b      	ldrh	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d130      	bne.n	800909c <USBD_SetAddress+0x74>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d12c      	bne.n	800909c <USBD_SetAddress+0x74>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	885b      	ldrh	r3, [r3, #2]
 8009046:	2b7f      	cmp	r3, #127	; 0x7f
 8009048:	d828      	bhi.n	800909c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009054:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905c:	2b03      	cmp	r3, #3
 800905e:	d104      	bne.n	800906a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f98c 	bl	8009380 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009068:	e01d      	b.n	80090a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7bfa      	ldrb	r2, [r7, #15]
 800906e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fe73 	bl	8009d62 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fa48 	bl	8009512 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009090:	e009      	b.n	80090a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909a:	e004      	b.n	80090a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f96e 	bl	8009380 <USBD_CtlError>
  }
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	4b41      	ldr	r3, [pc, #260]	; (80091c8 <USBD_SetConfig+0x118>)
 80090c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090c4:	4b40      	ldr	r3, [pc, #256]	; (80091c8 <USBD_SetConfig+0x118>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d904      	bls.n	80090d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f956 	bl	8009380 <USBD_CtlError>
 80090d4:	e075      	b.n	80091c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d002      	beq.n	80090e6 <USBD_SetConfig+0x36>
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d023      	beq.n	800912c <USBD_SetConfig+0x7c>
 80090e4:	e062      	b.n	80091ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090e6:	4b38      	ldr	r3, [pc, #224]	; (80091c8 <USBD_SetConfig+0x118>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01a      	beq.n	8009124 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090ee:	4b36      	ldr	r3, [pc, #216]	; (80091c8 <USBD_SetConfig+0x118>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2203      	movs	r2, #3
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009100:	4b31      	ldr	r3, [pc, #196]	; (80091c8 <USBD_SetConfig+0x118>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff f9e4 	bl	80084d4 <USBD_SetClassConfig>
 800910c:	4603      	mov	r3, r0
 800910e:	2b02      	cmp	r3, #2
 8009110:	d104      	bne.n	800911c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f933 	bl	8009380 <USBD_CtlError>
            return;
 800911a:	e052      	b.n	80091c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f9f8 	bl	8009512 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009122:	e04e      	b.n	80091c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f9f4 	bl	8009512 <USBD_CtlSendStatus>
        break;
 800912a:	e04a      	b.n	80091c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800912c:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <USBD_SetConfig+0x118>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d112      	bne.n	800915a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800913c:	4b22      	ldr	r3, [pc, #136]	; (80091c8 <USBD_SetConfig+0x118>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009146:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <USBD_SetConfig+0x118>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff f9e0 	bl	8008512 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9dd 	bl	8009512 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009158:	e033      	b.n	80091c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800915a:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <USBD_SetConfig+0x118>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	d01d      	beq.n	80091a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f9ce 	bl	8008512 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <USBD_SetConfig+0x118>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <USBD_SetConfig+0x118>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff f9a4 	bl	80084d4 <USBD_SetClassConfig>
 800918c:	4603      	mov	r3, r0
 800918e:	2b02      	cmp	r3, #2
 8009190:	d104      	bne.n	800919c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f8f3 	bl	8009380 <USBD_CtlError>
            return;
 800919a:	e012      	b.n	80091c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f9b8 	bl	8009512 <USBD_CtlSendStatus>
        break;
 80091a2:	e00e      	b.n	80091c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9b4 	bl	8009512 <USBD_CtlSendStatus>
        break;
 80091aa:	e00a      	b.n	80091c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8e6 	bl	8009380 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091b4:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <USBD_SetConfig+0x118>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff f9a9 	bl	8008512 <USBD_ClrClassConfig>
        break;
 80091c0:	bf00      	nop
    }
  }
}
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	2000034c 	.word	0x2000034c

080091cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d004      	beq.n	80091e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8cd 	bl	8009380 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091e6:	e022      	b.n	800922e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	dc02      	bgt.n	80091f8 <USBD_GetConfig+0x2c>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dc03      	bgt.n	80091fe <USBD_GetConfig+0x32>
 80091f6:	e015      	b.n	8009224 <USBD_GetConfig+0x58>
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d00b      	beq.n	8009214 <USBD_GetConfig+0x48>
 80091fc:	e012      	b.n	8009224 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3308      	adds	r3, #8
 8009208:	2201      	movs	r2, #1
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f922 	bl	8009456 <USBD_CtlSendData>
        break;
 8009212:	e00c      	b.n	800922e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	2201      	movs	r2, #1
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f91a 	bl	8009456 <USBD_CtlSendData>
        break;
 8009222:	e004      	b.n	800922e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8aa 	bl	8009380 <USBD_CtlError>
        break;
 800922c:	bf00      	nop
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009246:	3b01      	subs	r3, #1
 8009248:	2b02      	cmp	r3, #2
 800924a:	d81e      	bhi.n	800928a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	88db      	ldrh	r3, [r3, #6]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d004      	beq.n	800925e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f892 	bl	8009380 <USBD_CtlError>
        break;
 800925c:	e01a      	b.n	8009294 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f043 0202 	orr.w	r2, r3, #2
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	330c      	adds	r3, #12
 800927e:	2202      	movs	r2, #2
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f8e7 	bl	8009456 <USBD_CtlSendData>
      break;
 8009288:	e004      	b.n	8009294 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f877 	bl	8009380 <USBD_CtlError>
      break;
 8009292:	bf00      	nop
  }
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	885b      	ldrh	r3, [r3, #2]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d106      	bne.n	80092bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f92b 	bl	8009512 <USBD_CtlSendStatus>
  }
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d4:	3b01      	subs	r3, #1
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d80b      	bhi.n	80092f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	885b      	ldrh	r3, [r3, #2]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d10c      	bne.n	80092fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f911 	bl	8009512 <USBD_CtlSendStatus>
      }
      break;
 80092f0:	e004      	b.n	80092fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f843 	bl	8009380 <USBD_CtlError>
      break;
 80092fa:	e000      	b.n	80092fe <USBD_ClrFeature+0x3a>
      break;
 80092fc:	bf00      	nop
  }
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	785a      	ldrb	r2, [r3, #1]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	3302      	adds	r3, #2
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	b29a      	uxth	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	3303      	adds	r3, #3
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	b29b      	uxth	r3, r3
 8009334:	4413      	add	r3, r2
 8009336:	b29a      	uxth	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b29a      	uxth	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	3305      	adds	r3, #5
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	b29b      	uxth	r3, r3
 8009350:	4413      	add	r3, r2
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	3306      	adds	r3, #6
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b29a      	uxth	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3307      	adds	r3, #7
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b29b      	uxth	r3, r3
 800936c:	4413      	add	r3, r2
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	80da      	strh	r2, [r3, #6]

}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800938a:	2180      	movs	r1, #128	; 0x80
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fc7d 	bl	8009c8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc79 	bl	8009c8c <USBD_LL_StallEP>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b086      	sub	sp, #24
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d032      	beq.n	800941e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f834 	bl	8009426 <USBD_GetLen>
 80093be:	4603      	mov	r3, r0
 80093c0:	3301      	adds	r3, #1
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	75fa      	strb	r2, [r7, #23]
 80093d2:	461a      	mov	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4413      	add	r3, r2
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	75fa      	strb	r2, [r7, #23]
 80093e4:	461a      	mov	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4413      	add	r3, r2
 80093ea:	2203      	movs	r2, #3
 80093ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093ee:	e012      	b.n	8009416 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	60fa      	str	r2, [r7, #12]
 80093f6:	7dfa      	ldrb	r2, [r7, #23]
 80093f8:	1c51      	adds	r1, r2, #1
 80093fa:	75f9      	strb	r1, [r7, #23]
 80093fc:	4611      	mov	r1, r2
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	440a      	add	r2, r1
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	75fa      	strb	r2, [r7, #23]
 800940c:	461a      	mov	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e8      	bne.n	80093f0 <USBD_GetString+0x4e>
    }
  }
}
 800941e:	bf00      	nop
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009432:	e005      	b.n	8009440 <USBD_GetLen+0x1a>
  {
    len++;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	3301      	adds	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
    buf++;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3301      	adds	r3, #1
 800943e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1f5      	bne.n	8009434 <USBD_GetLen+0xe>
  }

  return len;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2202      	movs	r2, #2
 8009468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	2100      	movs	r1, #0
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fc8e 	bl	8009da0 <USBD_LL_Transmit>

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fc7c 	bl	8009da0 <USBD_LL_Transmit>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094d8:	88fb      	ldrh	r3, [r7, #6]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	2100      	movs	r1, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fc81 	bl	8009de6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	4613      	mov	r3, r2
 80094fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fc6f 	bl	8009de6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2204      	movs	r2, #4
 800951e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009522:	2300      	movs	r3, #0
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fc39 	bl	8009da0 <USBD_LL_Transmit>

  return USBD_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2205      	movs	r2, #5
 8009544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009548:	2300      	movs	r3, #0
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fc49 	bl	8009de6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009564:	2200      	movs	r2, #0
 8009566:	4912      	ldr	r1, [pc, #72]	; (80095b0 <MX_USB_DEVICE_Init+0x50>)
 8009568:	4812      	ldr	r0, [pc, #72]	; (80095b4 <MX_USB_DEVICE_Init+0x54>)
 800956a:	f7fe ff57 	bl	800841c <USBD_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009574:	f7f7 f9c0 	bl	80008f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009578:	490f      	ldr	r1, [pc, #60]	; (80095b8 <MX_USB_DEVICE_Init+0x58>)
 800957a:	480e      	ldr	r0, [pc, #56]	; (80095b4 <MX_USB_DEVICE_Init+0x54>)
 800957c:	f7fe ff79 	bl	8008472 <USBD_RegisterClass>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009586:	f7f7 f9b7 	bl	80008f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800958a:	490c      	ldr	r1, [pc, #48]	; (80095bc <MX_USB_DEVICE_Init+0x5c>)
 800958c:	4809      	ldr	r0, [pc, #36]	; (80095b4 <MX_USB_DEVICE_Init+0x54>)
 800958e:	f7fe fea7 	bl	80082e0 <USBD_CDC_RegisterInterface>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009598:	f7f7 f9ae 	bl	80008f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800959c:	4805      	ldr	r0, [pc, #20]	; (80095b4 <MX_USB_DEVICE_Init+0x54>)
 800959e:	f7fe ff82 	bl	80084a6 <USBD_Start>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095a8:	f7f7 f9a6 	bl	80008f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095ac:	bf00      	nop
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000164 	.word	0x20000164
 80095b4:	20000350 	.word	0x20000350
 80095b8:	20000050 	.word	0x20000050
 80095bc:	20000154 	.word	0x20000154

080095c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095c4:	2200      	movs	r2, #0
 80095c6:	4905      	ldr	r1, [pc, #20]	; (80095dc <CDC_Init_FS+0x1c>)
 80095c8:	4805      	ldr	r0, [pc, #20]	; (80095e0 <CDC_Init_FS+0x20>)
 80095ca:	f7fe fea0 	bl	800830e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095ce:	4905      	ldr	r1, [pc, #20]	; (80095e4 <CDC_Init_FS+0x24>)
 80095d0:	4803      	ldr	r0, [pc, #12]	; (80095e0 <CDC_Init_FS+0x20>)
 80095d2:	f7fe feb6 	bl	8008342 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000a14 	.word	0x20000a14
 80095e0:	20000350 	.word	0x20000350
 80095e4:	20000614 	.word	0x20000614

080095e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
 8009604:	4613      	mov	r3, r2
 8009606:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	2b23      	cmp	r3, #35	; 0x23
 800960c:	d84a      	bhi.n	80096a4 <CDC_Control_FS+0xac>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <CDC_Control_FS+0x1c>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	080096a5 	.word	0x080096a5
 8009618:	080096a5 	.word	0x080096a5
 800961c:	080096a5 	.word	0x080096a5
 8009620:	080096a5 	.word	0x080096a5
 8009624:	080096a5 	.word	0x080096a5
 8009628:	080096a5 	.word	0x080096a5
 800962c:	080096a5 	.word	0x080096a5
 8009630:	080096a5 	.word	0x080096a5
 8009634:	080096a5 	.word	0x080096a5
 8009638:	080096a5 	.word	0x080096a5
 800963c:	080096a5 	.word	0x080096a5
 8009640:	080096a5 	.word	0x080096a5
 8009644:	080096a5 	.word	0x080096a5
 8009648:	080096a5 	.word	0x080096a5
 800964c:	080096a5 	.word	0x080096a5
 8009650:	080096a5 	.word	0x080096a5
 8009654:	080096a5 	.word	0x080096a5
 8009658:	080096a5 	.word	0x080096a5
 800965c:	080096a5 	.word	0x080096a5
 8009660:	080096a5 	.word	0x080096a5
 8009664:	080096a5 	.word	0x080096a5
 8009668:	080096a5 	.word	0x080096a5
 800966c:	080096a5 	.word	0x080096a5
 8009670:	080096a5 	.word	0x080096a5
 8009674:	080096a5 	.word	0x080096a5
 8009678:	080096a5 	.word	0x080096a5
 800967c:	080096a5 	.word	0x080096a5
 8009680:	080096a5 	.word	0x080096a5
 8009684:	080096a5 	.word	0x080096a5
 8009688:	080096a5 	.word	0x080096a5
 800968c:	080096a5 	.word	0x080096a5
 8009690:	080096a5 	.word	0x080096a5
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096a5 	.word	0x080096a5
 800969c:	080096a5 	.word	0x080096a5
 80096a0:	080096a5 	.word	0x080096a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096a4:	bf00      	nop
  }

  return (USBD_OK);
 80096a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4805      	ldr	r0, [pc, #20]	; (80096d8 <CDC_Receive_FS+0x24>)
 80096c2:	f7fe fe3e 	bl	8008342 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096c6:	4804      	ldr	r0, [pc, #16]	; (80096d8 <CDC_Receive_FS+0x24>)
 80096c8:	f7fe fe7e 	bl	80083c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000350 	.word	0x20000350

080096dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <CDC_Transmit_FS+0x48>)
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096fe:	2301      	movs	r3, #1
 8009700:	e00b      	b.n	800971a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009702:	887b      	ldrh	r3, [r7, #2]
 8009704:	461a      	mov	r2, r3
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4806      	ldr	r0, [pc, #24]	; (8009724 <CDC_Transmit_FS+0x48>)
 800970a:	f7fe fe00 	bl	800830e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800970e:	4805      	ldr	r0, [pc, #20]	; (8009724 <CDC_Transmit_FS+0x48>)
 8009710:	f7fe fe2b 	bl	800836a <USBD_CDC_TransmitPacket>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20000350 	.word	0x20000350

08009728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2212      	movs	r2, #18
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	; (8009748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	20000180 	.word	0x20000180

0800974c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2204      	movs	r2, #4
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800975e:	4b03      	ldr	r3, [pc, #12]	; (800976c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	20000194 	.word	0x20000194

08009770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	; (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	; (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009788:	f7ff fe0b 	bl	80093a2 <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	; (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009794:	f7ff fe05 	bl	80093a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000e14 	.word	0x20000e14
 80097a8:	0800a858 	.word	0x0800a858

080097ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4904      	ldr	r1, [pc, #16]	; (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097bc:	4804      	ldr	r0, [pc, #16]	; (80097d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097be:	f7ff fdf0 	bl	80093a2 <USBD_GetString>
  return USBD_StrDesc;
 80097c2:	4b02      	ldr	r3, [pc, #8]	; (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000e14 	.word	0x20000e14
 80097d0:	0800a870 	.word	0x0800a870

080097d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	221a      	movs	r2, #26
 80097e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097e6:	f000 f843 	bl	8009870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ea:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000198 	.word	0x20000198

080097f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	; (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	; (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009810:	f7ff fdc7 	bl	80093a2 <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	; (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	; (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800981c:	f7ff fdc1 	bl	80093a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000e14 	.word	0x20000e14
 8009830:	0800a884 	.word	0x0800a884

08009834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	; (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	; (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800984c:	f7ff fda9 	bl	80093a2 <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	; (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	; (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009858:	f7ff fda3 	bl	80093a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000e14 	.word	0x20000e14
 800986c:	0800a890 	.word	0x0800a890

08009870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009876:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <Get_SerialNum+0x44>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800987c:	4b0e      	ldr	r3, [pc, #56]	; (80098b8 <Get_SerialNum+0x48>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009882:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <Get_SerialNum+0x4c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009896:	2208      	movs	r2, #8
 8009898:	4909      	ldr	r1, [pc, #36]	; (80098c0 <Get_SerialNum+0x50>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f814 	bl	80098c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a0:	2204      	movs	r2, #4
 80098a2:	4908      	ldr	r1, [pc, #32]	; (80098c4 <Get_SerialNum+0x54>)
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 f80f 	bl	80098c8 <IntToUnicode>
  }
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	1ffff7ac 	.word	0x1ffff7ac
 80098b8:	1ffff7b0 	.word	0x1ffff7b0
 80098bc:	1ffff7b4 	.word	0x1ffff7b4
 80098c0:	2000019a 	.word	0x2000019a
 80098c4:	200001aa 	.word	0x200001aa

080098c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e027      	b.n	8009930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80b      	bhi.n	8009900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4619      	mov	r1, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	440b      	add	r3, r1
 80098f8:	3230      	adds	r2, #48	; 0x30
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e00a      	b.n	8009916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3237      	adds	r2, #55	; 0x37
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	3301      	adds	r3, #1
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	3301      	adds	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d3      	bcc.n	80098e0 <IntToUnicode+0x18>
  }
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1c      	ldr	r2, [pc, #112]	; (80099d8 <HAL_PCD_MspInit+0x90>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d131      	bne.n	80099ce <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800996a:	4b1c      	ldr	r3, [pc, #112]	; (80099dc <HAL_PCD_MspInit+0x94>)
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4a1b      	ldr	r2, [pc, #108]	; (80099dc <HAL_PCD_MspInit+0x94>)
 8009970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009974:	6153      	str	r3, [r2, #20]
 8009976:	4b19      	ldr	r3, [pc, #100]	; (80099dc <HAL_PCD_MspInit+0x94>)
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009988:	2302      	movs	r3, #2
 800998a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009990:	2303      	movs	r3, #3
 8009992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009994:	230e      	movs	r3, #14
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4619      	mov	r1, r3
 800999e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80099a2:	f7f7 fcdb 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099a6:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <HAL_PCD_MspInit+0x94>)
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <HAL_PCD_MspInit+0x94>)
 80099ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099b0:	61d3      	str	r3, [r2, #28]
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <HAL_PCD_MspInit+0x94>)
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	2014      	movs	r0, #20
 80099c4:	f7f7 fc93 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80099c8:	2014      	movs	r0, #20
 80099ca:	f7f7 fcac 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099ce:	bf00      	nop
 80099d0:	3728      	adds	r7, #40	; 0x28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	40005c00 	.word	0x40005c00
 80099dc:	40021000 	.word	0x40021000

080099e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fe fd9e 	bl	8008538 <USBD_LL_SetupStage>
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	440b      	add	r3, r1
 8009a24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7fe fdd0 	bl	80085d2 <USBD_LL_DataOutStage>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	440b      	add	r3, r1
 8009a5a:	333c      	adds	r3, #60	; 0x3c
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7fe fe27 	bl	80086b4 <USBD_LL_DataInStage>
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe ff3a 	bl	80088f6 <USBD_LL_SOF>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a92:	2301      	movs	r3, #1
 8009a94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d001      	beq.n	8009aa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a9e:	f7f6 ff2b 	bl	80008f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009aa8:	7bfa      	ldrb	r2, [r7, #15]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe fee7 	bl	8008880 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fea0 	bl	80087fe <USBD_LL_Reset>
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fee2 	bl	80088a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ae4:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <HAL_PCD_SuspendCallback+0x30>)
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	4a03      	ldr	r2, [pc, #12]	; (8009af8 <HAL_PCD_SuspendCallback+0x30>)
 8009aea:	f043 0306 	orr.w	r3, r3, #6
 8009aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	e000ed00 	.word	0xe000ed00

08009afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fedd 	bl	80088ca <USBD_LL_Resume>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b20:	4a28      	ldr	r2, [pc, #160]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b32:	4a25      	ldr	r2, [pc, #148]	; (8009bc8 <USBD_LL_Init+0xb0>)
 8009b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b36:	4b23      	ldr	r3, [pc, #140]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b38:	2208      	movs	r2, #8
 8009b3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b3c:	4b21      	ldr	r3, [pc, #132]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b3e:	2202      	movs	r2, #2
 8009b40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b42:	4b20      	ldr	r3, [pc, #128]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b44:	2202      	movs	r2, #2
 8009b46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b48:	4b1e      	ldr	r3, [pc, #120]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b4e:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b54:	481b      	ldr	r0, [pc, #108]	; (8009bc4 <USBD_LL_Init+0xac>)
 8009b56:	f7f8 fcb8 	bl	80024ca <HAL_PCD_Init>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b60:	f7f6 feca 	bl	80008f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b6a:	2318      	movs	r3, #24
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7fa f941 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b7a:	2358      	movs	r3, #88	; 0x58
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2180      	movs	r1, #128	; 0x80
 8009b80:	f7fa f939 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b8a:	23c0      	movs	r3, #192	; 0xc0
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2181      	movs	r1, #129	; 0x81
 8009b90:	f7fa f931 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	f7fa f928 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2182      	movs	r1, #130	; 0x82
 8009bb4:	f7fa f91f 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20001014 	.word	0x20001014
 8009bc8:	40005c00 	.word	0x40005c00

08009bcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f8 fd43 	bl	800266e <HAL_PCD_Start>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f954 	bl	8009e9c <USBD_Get_USB_Status>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4603      	mov	r3, r0
 8009c12:	70fb      	strb	r3, [r7, #3]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70bb      	strb	r3, [r7, #2]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c2a:	78bb      	ldrb	r3, [r7, #2]
 8009c2c:	883a      	ldrh	r2, [r7, #0]
 8009c2e:	78f9      	ldrb	r1, [r7, #3]
 8009c30:	f7f8 fe3c 	bl	80028ac <HAL_PCD_EP_Open>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f92e 	bl	8009e9c <USBD_Get_USB_Status>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7f8 fe7a 	bl	8002966 <HAL_PCD_EP_Close>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f90f 	bl	8009e9c <USBD_Get_USB_Status>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7f8 ff23 	bl	8002af6 <HAL_PCD_EP_SetStall>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 f8f0 	bl	8009e9c <USBD_Get_USB_Status>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7f8 ff56 	bl	8002b9a <HAL_PCD_EP_ClrStall>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 f8d1 	bl	8009e9c <USBD_Get_USB_Status>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	da0c      	bge.n	8009d3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	440b      	add	r3, r1
 8009d38:	3302      	adds	r3, #2
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	e00b      	b.n	8009d56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d44:	68f9      	ldr	r1, [r7, #12]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009d54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f8 fd6e 	bl	8002862 <HAL_PCD_SetAddress>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f885 	bl	8009e9c <USBD_Get_USB_Status>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	607a      	str	r2, [r7, #4]
 8009daa:	461a      	mov	r2, r3
 8009dac:	460b      	mov	r3, r1
 8009dae:	72fb      	strb	r3, [r7, #11]
 8009db0:	4613      	mov	r3, r2
 8009db2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dc2:	893b      	ldrh	r3, [r7, #8]
 8009dc4:	7af9      	ldrb	r1, [r7, #11]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	f7f8 fe5e 	bl	8002a88 <HAL_PCD_EP_Transmit>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f862 	bl	8009e9c <USBD_Get_USB_Status>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ddc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b086      	sub	sp, #24
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	461a      	mov	r2, r3
 8009df2:	460b      	mov	r3, r1
 8009df4:	72fb      	strb	r3, [r7, #11]
 8009df6:	4613      	mov	r3, r2
 8009df8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e08:	893b      	ldrh	r3, [r7, #8]
 8009e0a:	7af9      	ldrb	r1, [r7, #11]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f7f8 fdf2 	bl	80029f6 <HAL_PCD_EP_Receive>
 8009e12:	4603      	mov	r3, r0
 8009e14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f83f 	bl	8009e9c <USBD_Get_USB_Status>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e22:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e3e:	78fa      	ldrb	r2, [r7, #3]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f8 fe08 	bl	8002a58 <HAL_PCD_EP_GetRxCount>
 8009e48:	4603      	mov	r3, r0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e5c:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <USBD_static_malloc+0x18>)
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20001300 	.word	0x20001300

08009e70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]

}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d817      	bhi.n	8009ee0 <USBD_Get_USB_Status+0x44>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBD_Get_USB_Status+0x1c>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009ecf 	.word	0x08009ecf
 8009ec0:	08009ed5 	.word	0x08009ed5
 8009ec4:	08009edb 	.word	0x08009edb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ecc:	e00b      	b.n	8009ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed2:	e008      	b.n	8009ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed8:	e005      	b.n	8009ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eda:	2302      	movs	r3, #2
 8009edc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ede:	e002      	b.n	8009ee6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee4:	bf00      	nop
  }
  return usb_status;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <__errno>:
 8009ef4:	4b01      	ldr	r3, [pc, #4]	; (8009efc <__errno+0x8>)
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	200001b4 	.word	0x200001b4

08009f00 <__libc_init_array>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4d0d      	ldr	r5, [pc, #52]	; (8009f38 <__libc_init_array+0x38>)
 8009f04:	4c0d      	ldr	r4, [pc, #52]	; (8009f3c <__libc_init_array+0x3c>)
 8009f06:	1b64      	subs	r4, r4, r5
 8009f08:	10a4      	asrs	r4, r4, #2
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	42a6      	cmp	r6, r4
 8009f0e:	d109      	bne.n	8009f24 <__libc_init_array+0x24>
 8009f10:	4d0b      	ldr	r5, [pc, #44]	; (8009f40 <__libc_init_array+0x40>)
 8009f12:	4c0c      	ldr	r4, [pc, #48]	; (8009f44 <__libc_init_array+0x44>)
 8009f14:	f000 fc8e 	bl	800a834 <_init>
 8009f18:	1b64      	subs	r4, r4, r5
 8009f1a:	10a4      	asrs	r4, r4, #2
 8009f1c:	2600      	movs	r6, #0
 8009f1e:	42a6      	cmp	r6, r4
 8009f20:	d105      	bne.n	8009f2e <__libc_init_array+0x2e>
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f28:	4798      	blx	r3
 8009f2a:	3601      	adds	r6, #1
 8009f2c:	e7ee      	b.n	8009f0c <__libc_init_array+0xc>
 8009f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f32:	4798      	blx	r3
 8009f34:	3601      	adds	r6, #1
 8009f36:	e7f2      	b.n	8009f1e <__libc_init_array+0x1e>
 8009f38:	0800a904 	.word	0x0800a904
 8009f3c:	0800a904 	.word	0x0800a904
 8009f40:	0800a904 	.word	0x0800a904
 8009f44:	0800a908 	.word	0x0800a908

08009f48 <memset>:
 8009f48:	4402      	add	r2, r0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <memset+0xa>
 8009f50:	4770      	bx	lr
 8009f52:	f803 1b01 	strb.w	r1, [r3], #1
 8009f56:	e7f9      	b.n	8009f4c <memset+0x4>

08009f58 <siprintf>:
 8009f58:	b40e      	push	{r1, r2, r3}
 8009f5a:	b500      	push	{lr}
 8009f5c:	b09c      	sub	sp, #112	; 0x70
 8009f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f60:	9002      	str	r0, [sp, #8]
 8009f62:	9006      	str	r0, [sp, #24]
 8009f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f68:	4809      	ldr	r0, [pc, #36]	; (8009f90 <siprintf+0x38>)
 8009f6a:	9107      	str	r1, [sp, #28]
 8009f6c:	9104      	str	r1, [sp, #16]
 8009f6e:	4909      	ldr	r1, [pc, #36]	; (8009f94 <siprintf+0x3c>)
 8009f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f74:	9105      	str	r1, [sp, #20]
 8009f76:	6800      	ldr	r0, [r0, #0]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	a902      	add	r1, sp, #8
 8009f7c:	f000 f868 	bl	800a050 <_svfiprintf_r>
 8009f80:	9b02      	ldr	r3, [sp, #8]
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	b01c      	add	sp, #112	; 0x70
 8009f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	4770      	bx	lr
 8009f90:	200001b4 	.word	0x200001b4
 8009f94:	ffff0208 	.word	0xffff0208

08009f98 <__ssputs_r>:
 8009f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	688e      	ldr	r6, [r1, #8]
 8009f9e:	429e      	cmp	r6, r3
 8009fa0:	4682      	mov	sl, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	4690      	mov	r8, r2
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	d838      	bhi.n	800a01c <__ssputs_r+0x84>
 8009faa:	898a      	ldrh	r2, [r1, #12]
 8009fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fb0:	d032      	beq.n	800a018 <__ssputs_r+0x80>
 8009fb2:	6825      	ldr	r5, [r4, #0]
 8009fb4:	6909      	ldr	r1, [r1, #16]
 8009fb6:	eba5 0901 	sub.w	r9, r5, r1
 8009fba:	6965      	ldr	r5, [r4, #20]
 8009fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	444b      	add	r3, r9
 8009fc8:	106d      	asrs	r5, r5, #1
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	bf38      	it	cc
 8009fce:	461d      	movcc	r5, r3
 8009fd0:	0553      	lsls	r3, r2, #21
 8009fd2:	d531      	bpl.n	800a038 <__ssputs_r+0xa0>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f000 fb63 	bl	800a6a0 <_malloc_r>
 8009fda:	4606      	mov	r6, r0
 8009fdc:	b950      	cbnz	r0, 8009ff4 <__ssputs_r+0x5c>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	f8ca 3000 	str.w	r3, [sl]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	6921      	ldr	r1, [r4, #16]
 8009ff6:	464a      	mov	r2, r9
 8009ff8:	f000 fabe 	bl	800a578 <memcpy>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	6126      	str	r6, [r4, #16]
 800a00a:	6165      	str	r5, [r4, #20]
 800a00c:	444e      	add	r6, r9
 800a00e:	eba5 0509 	sub.w	r5, r5, r9
 800a012:	6026      	str	r6, [r4, #0]
 800a014:	60a5      	str	r5, [r4, #8]
 800a016:	463e      	mov	r6, r7
 800a018:	42be      	cmp	r6, r7
 800a01a:	d900      	bls.n	800a01e <__ssputs_r+0x86>
 800a01c:	463e      	mov	r6, r7
 800a01e:	6820      	ldr	r0, [r4, #0]
 800a020:	4632      	mov	r2, r6
 800a022:	4641      	mov	r1, r8
 800a024:	f000 fab6 	bl	800a594 <memmove>
 800a028:	68a3      	ldr	r3, [r4, #8]
 800a02a:	1b9b      	subs	r3, r3, r6
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	4433      	add	r3, r6
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	2000      	movs	r0, #0
 800a036:	e7db      	b.n	8009ff0 <__ssputs_r+0x58>
 800a038:	462a      	mov	r2, r5
 800a03a:	f000 fba5 	bl	800a788 <_realloc_r>
 800a03e:	4606      	mov	r6, r0
 800a040:	2800      	cmp	r0, #0
 800a042:	d1e1      	bne.n	800a008 <__ssputs_r+0x70>
 800a044:	6921      	ldr	r1, [r4, #16]
 800a046:	4650      	mov	r0, sl
 800a048:	f000 fabe 	bl	800a5c8 <_free_r>
 800a04c:	e7c7      	b.n	8009fde <__ssputs_r+0x46>
	...

0800a050 <_svfiprintf_r>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	4698      	mov	r8, r3
 800a056:	898b      	ldrh	r3, [r1, #12]
 800a058:	061b      	lsls	r3, r3, #24
 800a05a:	b09d      	sub	sp, #116	; 0x74
 800a05c:	4607      	mov	r7, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	4614      	mov	r4, r2
 800a062:	d50e      	bpl.n	800a082 <_svfiprintf_r+0x32>
 800a064:	690b      	ldr	r3, [r1, #16]
 800a066:	b963      	cbnz	r3, 800a082 <_svfiprintf_r+0x32>
 800a068:	2140      	movs	r1, #64	; 0x40
 800a06a:	f000 fb19 	bl	800a6a0 <_malloc_r>
 800a06e:	6028      	str	r0, [r5, #0]
 800a070:	6128      	str	r0, [r5, #16]
 800a072:	b920      	cbnz	r0, 800a07e <_svfiprintf_r+0x2e>
 800a074:	230c      	movs	r3, #12
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	e0d1      	b.n	800a222 <_svfiprintf_r+0x1d2>
 800a07e:	2340      	movs	r3, #64	; 0x40
 800a080:	616b      	str	r3, [r5, #20]
 800a082:	2300      	movs	r3, #0
 800a084:	9309      	str	r3, [sp, #36]	; 0x24
 800a086:	2320      	movs	r3, #32
 800a088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a08c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a090:	2330      	movs	r3, #48	; 0x30
 800a092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a23c <_svfiprintf_r+0x1ec>
 800a096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a09a:	f04f 0901 	mov.w	r9, #1
 800a09e:	4623      	mov	r3, r4
 800a0a0:	469a      	mov	sl, r3
 800a0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a6:	b10a      	cbz	r2, 800a0ac <_svfiprintf_r+0x5c>
 800a0a8:	2a25      	cmp	r2, #37	; 0x25
 800a0aa:	d1f9      	bne.n	800a0a0 <_svfiprintf_r+0x50>
 800a0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b0:	d00b      	beq.n	800a0ca <_svfiprintf_r+0x7a>
 800a0b2:	465b      	mov	r3, fp
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	f7ff ff6d 	bl	8009f98 <__ssputs_r>
 800a0be:	3001      	adds	r0, #1
 800a0c0:	f000 80aa 	beq.w	800a218 <_svfiprintf_r+0x1c8>
 800a0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c6:	445a      	add	r2, fp
 800a0c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80a2 	beq.w	800a218 <_svfiprintf_r+0x1c8>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0de:	f10a 0a01 	add.w	sl, sl, #1
 800a0e2:	9304      	str	r3, [sp, #16]
 800a0e4:	9307      	str	r3, [sp, #28]
 800a0e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2205      	movs	r2, #5
 800a0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f4:	4851      	ldr	r0, [pc, #324]	; (800a23c <_svfiprintf_r+0x1ec>)
 800a0f6:	f7f6 f86b 	bl	80001d0 <memchr>
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	b9d8      	cbnz	r0, 800a136 <_svfiprintf_r+0xe6>
 800a0fe:	06d0      	lsls	r0, r2, #27
 800a100:	bf44      	itt	mi
 800a102:	2320      	movmi	r3, #32
 800a104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a108:	0711      	lsls	r1, r2, #28
 800a10a:	bf44      	itt	mi
 800a10c:	232b      	movmi	r3, #43	; 0x2b
 800a10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a112:	f89a 3000 	ldrb.w	r3, [sl]
 800a116:	2b2a      	cmp	r3, #42	; 0x2a
 800a118:	d015      	beq.n	800a146 <_svfiprintf_r+0xf6>
 800a11a:	9a07      	ldr	r2, [sp, #28]
 800a11c:	4654      	mov	r4, sl
 800a11e:	2000      	movs	r0, #0
 800a120:	f04f 0c0a 	mov.w	ip, #10
 800a124:	4621      	mov	r1, r4
 800a126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a12a:	3b30      	subs	r3, #48	; 0x30
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d94e      	bls.n	800a1ce <_svfiprintf_r+0x17e>
 800a130:	b1b0      	cbz	r0, 800a160 <_svfiprintf_r+0x110>
 800a132:	9207      	str	r2, [sp, #28]
 800a134:	e014      	b.n	800a160 <_svfiprintf_r+0x110>
 800a136:	eba0 0308 	sub.w	r3, r0, r8
 800a13a:	fa09 f303 	lsl.w	r3, r9, r3
 800a13e:	4313      	orrs	r3, r2
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	46a2      	mov	sl, r4
 800a144:	e7d2      	b.n	800a0ec <_svfiprintf_r+0x9c>
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	1d19      	adds	r1, r3, #4
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	9103      	str	r1, [sp, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfbb      	ittet	lt
 800a152:	425b      	neglt	r3, r3
 800a154:	f042 0202 	orrlt.w	r2, r2, #2
 800a158:	9307      	strge	r3, [sp, #28]
 800a15a:	9307      	strlt	r3, [sp, #28]
 800a15c:	bfb8      	it	lt
 800a15e:	9204      	strlt	r2, [sp, #16]
 800a160:	7823      	ldrb	r3, [r4, #0]
 800a162:	2b2e      	cmp	r3, #46	; 0x2e
 800a164:	d10c      	bne.n	800a180 <_svfiprintf_r+0x130>
 800a166:	7863      	ldrb	r3, [r4, #1]
 800a168:	2b2a      	cmp	r3, #42	; 0x2a
 800a16a:	d135      	bne.n	800a1d8 <_svfiprintf_r+0x188>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	1d1a      	adds	r2, r3, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	9203      	str	r2, [sp, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfb8      	it	lt
 800a178:	f04f 33ff 	movlt.w	r3, #4294967295
 800a17c:	3402      	adds	r4, #2
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a24c <_svfiprintf_r+0x1fc>
 800a184:	7821      	ldrb	r1, [r4, #0]
 800a186:	2203      	movs	r2, #3
 800a188:	4650      	mov	r0, sl
 800a18a:	f7f6 f821 	bl	80001d0 <memchr>
 800a18e:	b140      	cbz	r0, 800a1a2 <_svfiprintf_r+0x152>
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	eba0 000a 	sub.w	r0, r0, sl
 800a196:	fa03 f000 	lsl.w	r0, r3, r0
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	4303      	orrs	r3, r0
 800a19e:	3401      	adds	r4, #1
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4826      	ldr	r0, [pc, #152]	; (800a240 <_svfiprintf_r+0x1f0>)
 800a1a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ac:	2206      	movs	r2, #6
 800a1ae:	f7f6 f80f 	bl	80001d0 <memchr>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d038      	beq.n	800a228 <_svfiprintf_r+0x1d8>
 800a1b6:	4b23      	ldr	r3, [pc, #140]	; (800a244 <_svfiprintf_r+0x1f4>)
 800a1b8:	bb1b      	cbnz	r3, 800a202 <_svfiprintf_r+0x1b2>
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	3307      	adds	r3, #7
 800a1be:	f023 0307 	bic.w	r3, r3, #7
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	9303      	str	r3, [sp, #12]
 800a1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c8:	4433      	add	r3, r6
 800a1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a1cc:	e767      	b.n	800a09e <_svfiprintf_r+0x4e>
 800a1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	e7a5      	b.n	800a124 <_svfiprintf_r+0xd4>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	3401      	adds	r4, #1
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f04f 0c0a 	mov.w	ip, #10
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ea:	3a30      	subs	r2, #48	; 0x30
 800a1ec:	2a09      	cmp	r2, #9
 800a1ee:	d903      	bls.n	800a1f8 <_svfiprintf_r+0x1a8>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0c5      	beq.n	800a180 <_svfiprintf_r+0x130>
 800a1f4:	9105      	str	r1, [sp, #20]
 800a1f6:	e7c3      	b.n	800a180 <_svfiprintf_r+0x130>
 800a1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	2301      	movs	r3, #1
 800a200:	e7f0      	b.n	800a1e4 <_svfiprintf_r+0x194>
 800a202:	ab03      	add	r3, sp, #12
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	462a      	mov	r2, r5
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <_svfiprintf_r+0x1f8>)
 800a20a:	a904      	add	r1, sp, #16
 800a20c:	4638      	mov	r0, r7
 800a20e:	f3af 8000 	nop.w
 800a212:	1c42      	adds	r2, r0, #1
 800a214:	4606      	mov	r6, r0
 800a216:	d1d6      	bne.n	800a1c6 <_svfiprintf_r+0x176>
 800a218:	89ab      	ldrh	r3, [r5, #12]
 800a21a:	065b      	lsls	r3, r3, #25
 800a21c:	f53f af2c 	bmi.w	800a078 <_svfiprintf_r+0x28>
 800a220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a222:	b01d      	add	sp, #116	; 0x74
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a228:	ab03      	add	r3, sp, #12
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	462a      	mov	r2, r5
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <_svfiprintf_r+0x1f8>)
 800a230:	a904      	add	r1, sp, #16
 800a232:	4638      	mov	r0, r7
 800a234:	f000 f87a 	bl	800a32c <_printf_i>
 800a238:	e7eb      	b.n	800a212 <_svfiprintf_r+0x1c2>
 800a23a:	bf00      	nop
 800a23c:	0800a8d0 	.word	0x0800a8d0
 800a240:	0800a8da 	.word	0x0800a8da
 800a244:	00000000 	.word	0x00000000
 800a248:	08009f99 	.word	0x08009f99
 800a24c:	0800a8d6 	.word	0x0800a8d6

0800a250 <_printf_common>:
 800a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	4616      	mov	r6, r2
 800a256:	4699      	mov	r9, r3
 800a258:	688a      	ldr	r2, [r1, #8]
 800a25a:	690b      	ldr	r3, [r1, #16]
 800a25c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a260:	4293      	cmp	r3, r2
 800a262:	bfb8      	it	lt
 800a264:	4613      	movlt	r3, r2
 800a266:	6033      	str	r3, [r6, #0]
 800a268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a26c:	4607      	mov	r7, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	b10a      	cbz	r2, 800a276 <_printf_common+0x26>
 800a272:	3301      	adds	r3, #1
 800a274:	6033      	str	r3, [r6, #0]
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	0699      	lsls	r1, r3, #26
 800a27a:	bf42      	ittt	mi
 800a27c:	6833      	ldrmi	r3, [r6, #0]
 800a27e:	3302      	addmi	r3, #2
 800a280:	6033      	strmi	r3, [r6, #0]
 800a282:	6825      	ldr	r5, [r4, #0]
 800a284:	f015 0506 	ands.w	r5, r5, #6
 800a288:	d106      	bne.n	800a298 <_printf_common+0x48>
 800a28a:	f104 0a19 	add.w	sl, r4, #25
 800a28e:	68e3      	ldr	r3, [r4, #12]
 800a290:	6832      	ldr	r2, [r6, #0]
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	42ab      	cmp	r3, r5
 800a296:	dc26      	bgt.n	800a2e6 <_printf_common+0x96>
 800a298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a29c:	1e13      	subs	r3, r2, #0
 800a29e:	6822      	ldr	r2, [r4, #0]
 800a2a0:	bf18      	it	ne
 800a2a2:	2301      	movne	r3, #1
 800a2a4:	0692      	lsls	r2, r2, #26
 800a2a6:	d42b      	bmi.n	800a300 <_printf_common+0xb0>
 800a2a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	47c0      	blx	r8
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d01e      	beq.n	800a2f4 <_printf_common+0xa4>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	68e5      	ldr	r5, [r4, #12]
 800a2ba:	6832      	ldr	r2, [r6, #0]
 800a2bc:	f003 0306 	and.w	r3, r3, #6
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	bf08      	it	eq
 800a2c4:	1aad      	subeq	r5, r5, r2
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	6922      	ldr	r2, [r4, #16]
 800a2ca:	bf0c      	ite	eq
 800a2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2d0:	2500      	movne	r5, #0
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bfc4      	itt	gt
 800a2d6:	1a9b      	subgt	r3, r3, r2
 800a2d8:	18ed      	addgt	r5, r5, r3
 800a2da:	2600      	movs	r6, #0
 800a2dc:	341a      	adds	r4, #26
 800a2de:	42b5      	cmp	r5, r6
 800a2e0:	d11a      	bne.n	800a318 <_printf_common+0xc8>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	e008      	b.n	800a2f8 <_printf_common+0xa8>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4652      	mov	r2, sl
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	47c0      	blx	r8
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d103      	bne.n	800a2fc <_printf_common+0xac>
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	e7c6      	b.n	800a28e <_printf_common+0x3e>
 800a300:	18e1      	adds	r1, r4, r3
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	2030      	movs	r0, #48	; 0x30
 800a306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a30a:	4422      	add	r2, r4
 800a30c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a314:	3302      	adds	r3, #2
 800a316:	e7c7      	b.n	800a2a8 <_printf_common+0x58>
 800a318:	2301      	movs	r3, #1
 800a31a:	4622      	mov	r2, r4
 800a31c:	4649      	mov	r1, r9
 800a31e:	4638      	mov	r0, r7
 800a320:	47c0      	blx	r8
 800a322:	3001      	adds	r0, #1
 800a324:	d0e6      	beq.n	800a2f4 <_printf_common+0xa4>
 800a326:	3601      	adds	r6, #1
 800a328:	e7d9      	b.n	800a2de <_printf_common+0x8e>
	...

0800a32c <_printf_i>:
 800a32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a330:	7e0f      	ldrb	r7, [r1, #24]
 800a332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a334:	2f78      	cmp	r7, #120	; 0x78
 800a336:	4691      	mov	r9, r2
 800a338:	4680      	mov	r8, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	469a      	mov	sl, r3
 800a33e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a342:	d807      	bhi.n	800a354 <_printf_i+0x28>
 800a344:	2f62      	cmp	r7, #98	; 0x62
 800a346:	d80a      	bhi.n	800a35e <_printf_i+0x32>
 800a348:	2f00      	cmp	r7, #0
 800a34a:	f000 80d8 	beq.w	800a4fe <_printf_i+0x1d2>
 800a34e:	2f58      	cmp	r7, #88	; 0x58
 800a350:	f000 80a3 	beq.w	800a49a <_printf_i+0x16e>
 800a354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a35c:	e03a      	b.n	800a3d4 <_printf_i+0xa8>
 800a35e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a362:	2b15      	cmp	r3, #21
 800a364:	d8f6      	bhi.n	800a354 <_printf_i+0x28>
 800a366:	a101      	add	r1, pc, #4	; (adr r1, 800a36c <_printf_i+0x40>)
 800a368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a36c:	0800a3c5 	.word	0x0800a3c5
 800a370:	0800a3d9 	.word	0x0800a3d9
 800a374:	0800a355 	.word	0x0800a355
 800a378:	0800a355 	.word	0x0800a355
 800a37c:	0800a355 	.word	0x0800a355
 800a380:	0800a355 	.word	0x0800a355
 800a384:	0800a3d9 	.word	0x0800a3d9
 800a388:	0800a355 	.word	0x0800a355
 800a38c:	0800a355 	.word	0x0800a355
 800a390:	0800a355 	.word	0x0800a355
 800a394:	0800a355 	.word	0x0800a355
 800a398:	0800a4e5 	.word	0x0800a4e5
 800a39c:	0800a409 	.word	0x0800a409
 800a3a0:	0800a4c7 	.word	0x0800a4c7
 800a3a4:	0800a355 	.word	0x0800a355
 800a3a8:	0800a355 	.word	0x0800a355
 800a3ac:	0800a507 	.word	0x0800a507
 800a3b0:	0800a355 	.word	0x0800a355
 800a3b4:	0800a409 	.word	0x0800a409
 800a3b8:	0800a355 	.word	0x0800a355
 800a3bc:	0800a355 	.word	0x0800a355
 800a3c0:	0800a4cf 	.word	0x0800a4cf
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	1d1a      	adds	r2, r3, #4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	602a      	str	r2, [r5, #0]
 800a3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e0a3      	b.n	800a520 <_printf_i+0x1f4>
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	6829      	ldr	r1, [r5, #0]
 800a3dc:	0606      	lsls	r6, r0, #24
 800a3de:	f101 0304 	add.w	r3, r1, #4
 800a3e2:	d50a      	bpl.n	800a3fa <_printf_i+0xce>
 800a3e4:	680e      	ldr	r6, [r1, #0]
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	2e00      	cmp	r6, #0
 800a3ea:	da03      	bge.n	800a3f4 <_printf_i+0xc8>
 800a3ec:	232d      	movs	r3, #45	; 0x2d
 800a3ee:	4276      	negs	r6, r6
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f4:	485e      	ldr	r0, [pc, #376]	; (800a570 <_printf_i+0x244>)
 800a3f6:	230a      	movs	r3, #10
 800a3f8:	e019      	b.n	800a42e <_printf_i+0x102>
 800a3fa:	680e      	ldr	r6, [r1, #0]
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a402:	bf18      	it	ne
 800a404:	b236      	sxthne	r6, r6
 800a406:	e7ef      	b.n	800a3e8 <_printf_i+0xbc>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	1d19      	adds	r1, r3, #4
 800a40e:	6029      	str	r1, [r5, #0]
 800a410:	0601      	lsls	r1, r0, #24
 800a412:	d501      	bpl.n	800a418 <_printf_i+0xec>
 800a414:	681e      	ldr	r6, [r3, #0]
 800a416:	e002      	b.n	800a41e <_printf_i+0xf2>
 800a418:	0646      	lsls	r6, r0, #25
 800a41a:	d5fb      	bpl.n	800a414 <_printf_i+0xe8>
 800a41c:	881e      	ldrh	r6, [r3, #0]
 800a41e:	4854      	ldr	r0, [pc, #336]	; (800a570 <_printf_i+0x244>)
 800a420:	2f6f      	cmp	r7, #111	; 0x6f
 800a422:	bf0c      	ite	eq
 800a424:	2308      	moveq	r3, #8
 800a426:	230a      	movne	r3, #10
 800a428:	2100      	movs	r1, #0
 800a42a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a42e:	6865      	ldr	r5, [r4, #4]
 800a430:	60a5      	str	r5, [r4, #8]
 800a432:	2d00      	cmp	r5, #0
 800a434:	bfa2      	ittt	ge
 800a436:	6821      	ldrge	r1, [r4, #0]
 800a438:	f021 0104 	bicge.w	r1, r1, #4
 800a43c:	6021      	strge	r1, [r4, #0]
 800a43e:	b90e      	cbnz	r6, 800a444 <_printf_i+0x118>
 800a440:	2d00      	cmp	r5, #0
 800a442:	d04d      	beq.n	800a4e0 <_printf_i+0x1b4>
 800a444:	4615      	mov	r5, r2
 800a446:	fbb6 f1f3 	udiv	r1, r6, r3
 800a44a:	fb03 6711 	mls	r7, r3, r1, r6
 800a44e:	5dc7      	ldrb	r7, [r0, r7]
 800a450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a454:	4637      	mov	r7, r6
 800a456:	42bb      	cmp	r3, r7
 800a458:	460e      	mov	r6, r1
 800a45a:	d9f4      	bls.n	800a446 <_printf_i+0x11a>
 800a45c:	2b08      	cmp	r3, #8
 800a45e:	d10b      	bne.n	800a478 <_printf_i+0x14c>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	07de      	lsls	r6, r3, #31
 800a464:	d508      	bpl.n	800a478 <_printf_i+0x14c>
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	6861      	ldr	r1, [r4, #4]
 800a46a:	4299      	cmp	r1, r3
 800a46c:	bfde      	ittt	le
 800a46e:	2330      	movle	r3, #48	; 0x30
 800a470:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a474:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a478:	1b52      	subs	r2, r2, r5
 800a47a:	6122      	str	r2, [r4, #16]
 800a47c:	f8cd a000 	str.w	sl, [sp]
 800a480:	464b      	mov	r3, r9
 800a482:	aa03      	add	r2, sp, #12
 800a484:	4621      	mov	r1, r4
 800a486:	4640      	mov	r0, r8
 800a488:	f7ff fee2 	bl	800a250 <_printf_common>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d14c      	bne.n	800a52a <_printf_i+0x1fe>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	b004      	add	sp, #16
 800a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49a:	4835      	ldr	r0, [pc, #212]	; (800a570 <_printf_i+0x244>)
 800a49c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4a0:	6829      	ldr	r1, [r5, #0]
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4a8:	6029      	str	r1, [r5, #0]
 800a4aa:	061d      	lsls	r5, r3, #24
 800a4ac:	d514      	bpl.n	800a4d8 <_printf_i+0x1ac>
 800a4ae:	07df      	lsls	r7, r3, #31
 800a4b0:	bf44      	itt	mi
 800a4b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a4b6:	6023      	strmi	r3, [r4, #0]
 800a4b8:	b91e      	cbnz	r6, 800a4c2 <_printf_i+0x196>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f023 0320 	bic.w	r3, r3, #32
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	2310      	movs	r3, #16
 800a4c4:	e7b0      	b.n	800a428 <_printf_i+0xfc>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	f043 0320 	orr.w	r3, r3, #32
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	2378      	movs	r3, #120	; 0x78
 800a4d0:	4828      	ldr	r0, [pc, #160]	; (800a574 <_printf_i+0x248>)
 800a4d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4d6:	e7e3      	b.n	800a4a0 <_printf_i+0x174>
 800a4d8:	0659      	lsls	r1, r3, #25
 800a4da:	bf48      	it	mi
 800a4dc:	b2b6      	uxthmi	r6, r6
 800a4de:	e7e6      	b.n	800a4ae <_printf_i+0x182>
 800a4e0:	4615      	mov	r5, r2
 800a4e2:	e7bb      	b.n	800a45c <_printf_i+0x130>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	6826      	ldr	r6, [r4, #0]
 800a4e8:	6961      	ldr	r1, [r4, #20]
 800a4ea:	1d18      	adds	r0, r3, #4
 800a4ec:	6028      	str	r0, [r5, #0]
 800a4ee:	0635      	lsls	r5, r6, #24
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_i+0x1cc>
 800a4f4:	6019      	str	r1, [r3, #0]
 800a4f6:	e002      	b.n	800a4fe <_printf_i+0x1d2>
 800a4f8:	0670      	lsls	r0, r6, #25
 800a4fa:	d5fb      	bpl.n	800a4f4 <_printf_i+0x1c8>
 800a4fc:	8019      	strh	r1, [r3, #0]
 800a4fe:	2300      	movs	r3, #0
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	4615      	mov	r5, r2
 800a504:	e7ba      	b.n	800a47c <_printf_i+0x150>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	602a      	str	r2, [r5, #0]
 800a50c:	681d      	ldr	r5, [r3, #0]
 800a50e:	6862      	ldr	r2, [r4, #4]
 800a510:	2100      	movs	r1, #0
 800a512:	4628      	mov	r0, r5
 800a514:	f7f5 fe5c 	bl	80001d0 <memchr>
 800a518:	b108      	cbz	r0, 800a51e <_printf_i+0x1f2>
 800a51a:	1b40      	subs	r0, r0, r5
 800a51c:	6060      	str	r0, [r4, #4]
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	2300      	movs	r3, #0
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a528:	e7a8      	b.n	800a47c <_printf_i+0x150>
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4649      	mov	r1, r9
 800a530:	4640      	mov	r0, r8
 800a532:	47d0      	blx	sl
 800a534:	3001      	adds	r0, #1
 800a536:	d0ab      	beq.n	800a490 <_printf_i+0x164>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	079b      	lsls	r3, r3, #30
 800a53c:	d413      	bmi.n	800a566 <_printf_i+0x23a>
 800a53e:	68e0      	ldr	r0, [r4, #12]
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	4298      	cmp	r0, r3
 800a544:	bfb8      	it	lt
 800a546:	4618      	movlt	r0, r3
 800a548:	e7a4      	b.n	800a494 <_printf_i+0x168>
 800a54a:	2301      	movs	r3, #1
 800a54c:	4632      	mov	r2, r6
 800a54e:	4649      	mov	r1, r9
 800a550:	4640      	mov	r0, r8
 800a552:	47d0      	blx	sl
 800a554:	3001      	adds	r0, #1
 800a556:	d09b      	beq.n	800a490 <_printf_i+0x164>
 800a558:	3501      	adds	r5, #1
 800a55a:	68e3      	ldr	r3, [r4, #12]
 800a55c:	9903      	ldr	r1, [sp, #12]
 800a55e:	1a5b      	subs	r3, r3, r1
 800a560:	42ab      	cmp	r3, r5
 800a562:	dcf2      	bgt.n	800a54a <_printf_i+0x21e>
 800a564:	e7eb      	b.n	800a53e <_printf_i+0x212>
 800a566:	2500      	movs	r5, #0
 800a568:	f104 0619 	add.w	r6, r4, #25
 800a56c:	e7f5      	b.n	800a55a <_printf_i+0x22e>
 800a56e:	bf00      	nop
 800a570:	0800a8e1 	.word	0x0800a8e1
 800a574:	0800a8f2 	.word	0x0800a8f2

0800a578 <memcpy>:
 800a578:	440a      	add	r2, r1
 800a57a:	4291      	cmp	r1, r2
 800a57c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a580:	d100      	bne.n	800a584 <memcpy+0xc>
 800a582:	4770      	bx	lr
 800a584:	b510      	push	{r4, lr}
 800a586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a58e:	4291      	cmp	r1, r2
 800a590:	d1f9      	bne.n	800a586 <memcpy+0xe>
 800a592:	bd10      	pop	{r4, pc}

0800a594 <memmove>:
 800a594:	4288      	cmp	r0, r1
 800a596:	b510      	push	{r4, lr}
 800a598:	eb01 0402 	add.w	r4, r1, r2
 800a59c:	d902      	bls.n	800a5a4 <memmove+0x10>
 800a59e:	4284      	cmp	r4, r0
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	d807      	bhi.n	800a5b4 <memmove+0x20>
 800a5a4:	1e43      	subs	r3, r0, #1
 800a5a6:	42a1      	cmp	r1, r4
 800a5a8:	d008      	beq.n	800a5bc <memmove+0x28>
 800a5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5b2:	e7f8      	b.n	800a5a6 <memmove+0x12>
 800a5b4:	4402      	add	r2, r0
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	428a      	cmp	r2, r1
 800a5ba:	d100      	bne.n	800a5be <memmove+0x2a>
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5c6:	e7f7      	b.n	800a5b8 <memmove+0x24>

0800a5c8 <_free_r>:
 800a5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	d044      	beq.n	800a658 <_free_r+0x90>
 800a5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5d2:	9001      	str	r0, [sp, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5da:	bfb8      	it	lt
 800a5dc:	18e4      	addlt	r4, r4, r3
 800a5de:	f000 f913 	bl	800a808 <__malloc_lock>
 800a5e2:	4a1e      	ldr	r2, [pc, #120]	; (800a65c <_free_r+0x94>)
 800a5e4:	9801      	ldr	r0, [sp, #4]
 800a5e6:	6813      	ldr	r3, [r2, #0]
 800a5e8:	b933      	cbnz	r3, 800a5f8 <_free_r+0x30>
 800a5ea:	6063      	str	r3, [r4, #4]
 800a5ec:	6014      	str	r4, [r2, #0]
 800a5ee:	b003      	add	sp, #12
 800a5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5f4:	f000 b90e 	b.w	800a814 <__malloc_unlock>
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d908      	bls.n	800a60e <_free_r+0x46>
 800a5fc:	6825      	ldr	r5, [r4, #0]
 800a5fe:	1961      	adds	r1, r4, r5
 800a600:	428b      	cmp	r3, r1
 800a602:	bf01      	itttt	eq
 800a604:	6819      	ldreq	r1, [r3, #0]
 800a606:	685b      	ldreq	r3, [r3, #4]
 800a608:	1949      	addeq	r1, r1, r5
 800a60a:	6021      	streq	r1, [r4, #0]
 800a60c:	e7ed      	b.n	800a5ea <_free_r+0x22>
 800a60e:	461a      	mov	r2, r3
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	b10b      	cbz	r3, 800a618 <_free_r+0x50>
 800a614:	42a3      	cmp	r3, r4
 800a616:	d9fa      	bls.n	800a60e <_free_r+0x46>
 800a618:	6811      	ldr	r1, [r2, #0]
 800a61a:	1855      	adds	r5, r2, r1
 800a61c:	42a5      	cmp	r5, r4
 800a61e:	d10b      	bne.n	800a638 <_free_r+0x70>
 800a620:	6824      	ldr	r4, [r4, #0]
 800a622:	4421      	add	r1, r4
 800a624:	1854      	adds	r4, r2, r1
 800a626:	42a3      	cmp	r3, r4
 800a628:	6011      	str	r1, [r2, #0]
 800a62a:	d1e0      	bne.n	800a5ee <_free_r+0x26>
 800a62c:	681c      	ldr	r4, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	6053      	str	r3, [r2, #4]
 800a632:	4421      	add	r1, r4
 800a634:	6011      	str	r1, [r2, #0]
 800a636:	e7da      	b.n	800a5ee <_free_r+0x26>
 800a638:	d902      	bls.n	800a640 <_free_r+0x78>
 800a63a:	230c      	movs	r3, #12
 800a63c:	6003      	str	r3, [r0, #0]
 800a63e:	e7d6      	b.n	800a5ee <_free_r+0x26>
 800a640:	6825      	ldr	r5, [r4, #0]
 800a642:	1961      	adds	r1, r4, r5
 800a644:	428b      	cmp	r3, r1
 800a646:	bf04      	itt	eq
 800a648:	6819      	ldreq	r1, [r3, #0]
 800a64a:	685b      	ldreq	r3, [r3, #4]
 800a64c:	6063      	str	r3, [r4, #4]
 800a64e:	bf04      	itt	eq
 800a650:	1949      	addeq	r1, r1, r5
 800a652:	6021      	streq	r1, [r4, #0]
 800a654:	6054      	str	r4, [r2, #4]
 800a656:	e7ca      	b.n	800a5ee <_free_r+0x26>
 800a658:	b003      	add	sp, #12
 800a65a:	bd30      	pop	{r4, r5, pc}
 800a65c:	20001520 	.word	0x20001520

0800a660 <sbrk_aligned>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4e0e      	ldr	r6, [pc, #56]	; (800a69c <sbrk_aligned+0x3c>)
 800a664:	460c      	mov	r4, r1
 800a666:	6831      	ldr	r1, [r6, #0]
 800a668:	4605      	mov	r5, r0
 800a66a:	b911      	cbnz	r1, 800a672 <sbrk_aligned+0x12>
 800a66c:	f000 f8bc 	bl	800a7e8 <_sbrk_r>
 800a670:	6030      	str	r0, [r6, #0]
 800a672:	4621      	mov	r1, r4
 800a674:	4628      	mov	r0, r5
 800a676:	f000 f8b7 	bl	800a7e8 <_sbrk_r>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d00a      	beq.n	800a694 <sbrk_aligned+0x34>
 800a67e:	1cc4      	adds	r4, r0, #3
 800a680:	f024 0403 	bic.w	r4, r4, #3
 800a684:	42a0      	cmp	r0, r4
 800a686:	d007      	beq.n	800a698 <sbrk_aligned+0x38>
 800a688:	1a21      	subs	r1, r4, r0
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f8ac 	bl	800a7e8 <_sbrk_r>
 800a690:	3001      	adds	r0, #1
 800a692:	d101      	bne.n	800a698 <sbrk_aligned+0x38>
 800a694:	f04f 34ff 	mov.w	r4, #4294967295
 800a698:	4620      	mov	r0, r4
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	20001524 	.word	0x20001524

0800a6a0 <_malloc_r>:
 800a6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a4:	1ccd      	adds	r5, r1, #3
 800a6a6:	f025 0503 	bic.w	r5, r5, #3
 800a6aa:	3508      	adds	r5, #8
 800a6ac:	2d0c      	cmp	r5, #12
 800a6ae:	bf38      	it	cc
 800a6b0:	250c      	movcc	r5, #12
 800a6b2:	2d00      	cmp	r5, #0
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	db01      	blt.n	800a6bc <_malloc_r+0x1c>
 800a6b8:	42a9      	cmp	r1, r5
 800a6ba:	d905      	bls.n	800a6c8 <_malloc_r+0x28>
 800a6bc:	230c      	movs	r3, #12
 800a6be:	603b      	str	r3, [r7, #0]
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	4e2e      	ldr	r6, [pc, #184]	; (800a784 <_malloc_r+0xe4>)
 800a6ca:	f000 f89d 	bl	800a808 <__malloc_lock>
 800a6ce:	6833      	ldr	r3, [r6, #0]
 800a6d0:	461c      	mov	r4, r3
 800a6d2:	bb34      	cbnz	r4, 800a722 <_malloc_r+0x82>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	f7ff ffc2 	bl	800a660 <sbrk_aligned>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	4604      	mov	r4, r0
 800a6e0:	d14d      	bne.n	800a77e <_malloc_r+0xde>
 800a6e2:	6834      	ldr	r4, [r6, #0]
 800a6e4:	4626      	mov	r6, r4
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	d140      	bne.n	800a76c <_malloc_r+0xcc>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	eb04 0803 	add.w	r8, r4, r3
 800a6f4:	f000 f878 	bl	800a7e8 <_sbrk_r>
 800a6f8:	4580      	cmp	r8, r0
 800a6fa:	d13a      	bne.n	800a772 <_malloc_r+0xd2>
 800a6fc:	6821      	ldr	r1, [r4, #0]
 800a6fe:	3503      	adds	r5, #3
 800a700:	1a6d      	subs	r5, r5, r1
 800a702:	f025 0503 	bic.w	r5, r5, #3
 800a706:	3508      	adds	r5, #8
 800a708:	2d0c      	cmp	r5, #12
 800a70a:	bf38      	it	cc
 800a70c:	250c      	movcc	r5, #12
 800a70e:	4629      	mov	r1, r5
 800a710:	4638      	mov	r0, r7
 800a712:	f7ff ffa5 	bl	800a660 <sbrk_aligned>
 800a716:	3001      	adds	r0, #1
 800a718:	d02b      	beq.n	800a772 <_malloc_r+0xd2>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	442b      	add	r3, r5
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	e00e      	b.n	800a740 <_malloc_r+0xa0>
 800a722:	6822      	ldr	r2, [r4, #0]
 800a724:	1b52      	subs	r2, r2, r5
 800a726:	d41e      	bmi.n	800a766 <_malloc_r+0xc6>
 800a728:	2a0b      	cmp	r2, #11
 800a72a:	d916      	bls.n	800a75a <_malloc_r+0xba>
 800a72c:	1961      	adds	r1, r4, r5
 800a72e:	42a3      	cmp	r3, r4
 800a730:	6025      	str	r5, [r4, #0]
 800a732:	bf18      	it	ne
 800a734:	6059      	strne	r1, [r3, #4]
 800a736:	6863      	ldr	r3, [r4, #4]
 800a738:	bf08      	it	eq
 800a73a:	6031      	streq	r1, [r6, #0]
 800a73c:	5162      	str	r2, [r4, r5]
 800a73e:	604b      	str	r3, [r1, #4]
 800a740:	4638      	mov	r0, r7
 800a742:	f104 060b 	add.w	r6, r4, #11
 800a746:	f000 f865 	bl	800a814 <__malloc_unlock>
 800a74a:	f026 0607 	bic.w	r6, r6, #7
 800a74e:	1d23      	adds	r3, r4, #4
 800a750:	1af2      	subs	r2, r6, r3
 800a752:	d0b6      	beq.n	800a6c2 <_malloc_r+0x22>
 800a754:	1b9b      	subs	r3, r3, r6
 800a756:	50a3      	str	r3, [r4, r2]
 800a758:	e7b3      	b.n	800a6c2 <_malloc_r+0x22>
 800a75a:	6862      	ldr	r2, [r4, #4]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	bf0c      	ite	eq
 800a760:	6032      	streq	r2, [r6, #0]
 800a762:	605a      	strne	r2, [r3, #4]
 800a764:	e7ec      	b.n	800a740 <_malloc_r+0xa0>
 800a766:	4623      	mov	r3, r4
 800a768:	6864      	ldr	r4, [r4, #4]
 800a76a:	e7b2      	b.n	800a6d2 <_malloc_r+0x32>
 800a76c:	4634      	mov	r4, r6
 800a76e:	6876      	ldr	r6, [r6, #4]
 800a770:	e7b9      	b.n	800a6e6 <_malloc_r+0x46>
 800a772:	230c      	movs	r3, #12
 800a774:	603b      	str	r3, [r7, #0]
 800a776:	4638      	mov	r0, r7
 800a778:	f000 f84c 	bl	800a814 <__malloc_unlock>
 800a77c:	e7a1      	b.n	800a6c2 <_malloc_r+0x22>
 800a77e:	6025      	str	r5, [r4, #0]
 800a780:	e7de      	b.n	800a740 <_malloc_r+0xa0>
 800a782:	bf00      	nop
 800a784:	20001520 	.word	0x20001520

0800a788 <_realloc_r>:
 800a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78c:	4680      	mov	r8, r0
 800a78e:	4614      	mov	r4, r2
 800a790:	460e      	mov	r6, r1
 800a792:	b921      	cbnz	r1, 800a79e <_realloc_r+0x16>
 800a794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a798:	4611      	mov	r1, r2
 800a79a:	f7ff bf81 	b.w	800a6a0 <_malloc_r>
 800a79e:	b92a      	cbnz	r2, 800a7ac <_realloc_r+0x24>
 800a7a0:	f7ff ff12 	bl	800a5c8 <_free_r>
 800a7a4:	4625      	mov	r5, r4
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ac:	f000 f838 	bl	800a820 <_malloc_usable_size_r>
 800a7b0:	4284      	cmp	r4, r0
 800a7b2:	4607      	mov	r7, r0
 800a7b4:	d802      	bhi.n	800a7bc <_realloc_r+0x34>
 800a7b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7ba:	d812      	bhi.n	800a7e2 <_realloc_r+0x5a>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4640      	mov	r0, r8
 800a7c0:	f7ff ff6e 	bl	800a6a0 <_malloc_r>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0ed      	beq.n	800a7a6 <_realloc_r+0x1e>
 800a7ca:	42bc      	cmp	r4, r7
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	bf28      	it	cs
 800a7d2:	463a      	movcs	r2, r7
 800a7d4:	f7ff fed0 	bl	800a578 <memcpy>
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fef4 	bl	800a5c8 <_free_r>
 800a7e0:	e7e1      	b.n	800a7a6 <_realloc_r+0x1e>
 800a7e2:	4635      	mov	r5, r6
 800a7e4:	e7df      	b.n	800a7a6 <_realloc_r+0x1e>
	...

0800a7e8 <_sbrk_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	; (800a804 <_sbrk_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 fba4 	bl	8000f40 <_sbrk>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_sbrk_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_sbrk_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20001528 	.word	0x20001528

0800a808 <__malloc_lock>:
 800a808:	4801      	ldr	r0, [pc, #4]	; (800a810 <__malloc_lock+0x8>)
 800a80a:	f000 b811 	b.w	800a830 <__retarget_lock_acquire_recursive>
 800a80e:	bf00      	nop
 800a810:	2000152c 	.word	0x2000152c

0800a814 <__malloc_unlock>:
 800a814:	4801      	ldr	r0, [pc, #4]	; (800a81c <__malloc_unlock+0x8>)
 800a816:	f000 b80c 	b.w	800a832 <__retarget_lock_release_recursive>
 800a81a:	bf00      	nop
 800a81c:	2000152c 	.word	0x2000152c

0800a820 <_malloc_usable_size_r>:
 800a820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a824:	1f18      	subs	r0, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfbc      	itt	lt
 800a82a:	580b      	ldrlt	r3, [r1, r0]
 800a82c:	18c0      	addlt	r0, r0, r3
 800a82e:	4770      	bx	lr

0800a830 <__retarget_lock_acquire_recursive>:
 800a830:	4770      	bx	lr

0800a832 <__retarget_lock_release_recursive>:
 800a832:	4770      	bx	lr

0800a834 <_init>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	bf00      	nop
 800a838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83a:	bc08      	pop	{r3}
 800a83c:	469e      	mov	lr, r3
 800a83e:	4770      	bx	lr

0800a840 <_fini>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	bf00      	nop
 800a844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a846:	bc08      	pop	{r3}
 800a848:	469e      	mov	lr, r3
 800a84a:	4770      	bx	lr
